// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: language_progress.sql

package db

import (
	"context"
)

const addLanguageProgressCompletedSeries = `-- name: AddLanguageProgressCompletedSeries :exec
UPDATE "language_progress" SET
  "completed_series" = "completed_series" + 1,
  "in_progress_series" = "in_progress_series" - 1
WHERE "id" = $1
`

func (q *Queries) AddLanguageProgressCompletedSeries(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, addLanguageProgressCompletedSeries, id)
	return err
}

const createLanguageProgress = `-- name: CreateLanguageProgress :one

INSERT INTO "language_progress" (
  "language_slug",
  "user_id",
  "is_current"
) VALUES (
  $1,
  $2,
  true
) RETURNING id, user_id, language_slug, completed_series, in_progress_series, is_current, created_at, updated_at
`

type CreateLanguageProgressParams struct {
	LanguageSlug string
	UserID       int32
}

// Copyright (C) 2024 Afonso Barracha
//
// This file is part of KiwiScript.
//
// KiwiScript is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// KiwiScript is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with KiwiScript.  If not, see <https://www.gnu.org/licenses/>.
func (q *Queries) CreateLanguageProgress(ctx context.Context, arg CreateLanguageProgressParams) (LanguageProgress, error) {
	row := q.db.QueryRow(ctx, createLanguageProgress, arg.LanguageSlug, arg.UserID)
	var i LanguageProgress
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.LanguageSlug,
		&i.CompletedSeries,
		&i.InProgressSeries,
		&i.IsCurrent,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const decrementLanguageProgressCompletedSeries = `-- name: DecrementLanguageProgressCompletedSeries :exec
UPDATE "language_progress" SET
  "completed_series" = "completed_series" - 1
WHERE "id" = $1
`

func (q *Queries) DecrementLanguageProgressCompletedSeries(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, decrementLanguageProgressCompletedSeries, id)
	return err
}

const decrementLanguageProgressInProgressSeries = `-- name: DecrementLanguageProgressInProgressSeries :exec
UPDATE "language_progress" SET
  "in_progress_series" = "in_progress_series" - 1
WHERE "id" = $1
`

func (q *Queries) DecrementLanguageProgressInProgressSeries(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, decrementLanguageProgressInProgressSeries, id)
	return err
}

const deleteLanguageProgressByID = `-- name: DeleteLanguageProgressByID :exec
DELETE FROM "language_progress"
WHERE "id" = $1
`

func (q *Queries) DeleteLanguageProgressByID(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteLanguageProgressByID, id)
	return err
}

const findLanguageProgressBySlugAndUserID = `-- name: FindLanguageProgressBySlugAndUserID :one
SELECT id, user_id, language_slug, completed_series, in_progress_series, is_current, created_at, updated_at FROM "language_progress"
WHERE "language_slug" = $1 AND "user_id" = $2 LIMIT 1
`

type FindLanguageProgressBySlugAndUserIDParams struct {
	LanguageSlug string
	UserID       int32
}

func (q *Queries) FindLanguageProgressBySlugAndUserID(ctx context.Context, arg FindLanguageProgressBySlugAndUserIDParams) (LanguageProgress, error) {
	row := q.db.QueryRow(ctx, findLanguageProgressBySlugAndUserID, arg.LanguageSlug, arg.UserID)
	var i LanguageProgress
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.LanguageSlug,
		&i.CompletedSeries,
		&i.InProgressSeries,
		&i.IsCurrent,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const incrementLanguageProgressInProgressSeries = `-- name: IncrementLanguageProgressInProgressSeries :exec
UPDATE "language_progress" SET
  "in_progress_series" = "in_progress_series" + 1
WHERE "id" = $1
`

func (q *Queries) IncrementLanguageProgressInProgressSeries(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, incrementLanguageProgressInProgressSeries, id)
	return err
}

const removeLanguageProgressCompletedSeries = `-- name: RemoveLanguageProgressCompletedSeries :exec
UPDATE "language_progress" SET
  "completed_series" = "completed_series" - 1,
  "in_progress_series" = "in_progress_series" + 1
WHERE "id" = $1
`

func (q *Queries) RemoveLanguageProgressCompletedSeries(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, removeLanguageProgressCompletedSeries, id)
	return err
}

const setLanguageProgressIsCurrentFalse = `-- name: SetLanguageProgressIsCurrentFalse :exec
UPDATE "language_progress" SET
  "is_current" = false
WHERE "user_id" = $1 AND "language_slug" <> $2
`

type SetLanguageProgressIsCurrentFalseParams struct {
	UserID       int32
	LanguageSlug string
}

func (q *Queries) SetLanguageProgressIsCurrentFalse(ctx context.Context, arg SetLanguageProgressIsCurrentFalseParams) error {
	_, err := q.db.Exec(ctx, setLanguageProgressIsCurrentFalse, arg.UserID, arg.LanguageSlug)
	return err
}

const setLanguageProgressIsCurrentTrue = `-- name: SetLanguageProgressIsCurrentTrue :one
UPDATE "language_progress" SET
  "is_current" = true
WHERE "id" = $1
RETURNING id, user_id, language_slug, completed_series, in_progress_series, is_current, created_at, updated_at
`

func (q *Queries) SetLanguageProgressIsCurrentTrue(ctx context.Context, id int32) (LanguageProgress, error) {
	row := q.db.QueryRow(ctx, setLanguageProgressIsCurrentTrue, id)
	var i LanguageProgress
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.LanguageSlug,
		&i.CompletedSeries,
		&i.InProgressSeries,
		&i.IsCurrent,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
