// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: lesson_progress.sql

package db

import (
	"context"
)

const completeLessonProgress = `-- name: CompleteLessonProgress :one
UPDATE "lesson_progress"
SET "completed_at" = now()
WHERE "id" = $1
RETURNING id, user_id, language_slug, series_slug, section_id, lesson_id, language_progress_id, series_progress_id, section_progress_id, completed_at, viewed_at, created_at, updated_at
`

func (q *Queries) CompleteLessonProgress(ctx context.Context, id int32) (LessonProgress, error) {
	row := q.db.QueryRow(ctx, completeLessonProgress, id)
	var i LessonProgress
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.LanguageSlug,
		&i.SeriesSlug,
		&i.SectionID,
		&i.LessonID,
		&i.LanguageProgressID,
		&i.SeriesProgressID,
		&i.SectionProgressID,
		&i.CompletedAt,
		&i.ViewedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createLessonProgress = `-- name: CreateLessonProgress :one

INSERT INTO "lesson_progress" (
    "language_slug",
    "series_slug",
    "section_id",
    "lesson_id",
    "language_progress_id",
    "series_progress_id",
    "section_progress_id",
    "user_id"
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8
) RETURNING id, user_id, language_slug, series_slug, section_id, lesson_id, language_progress_id, series_progress_id, section_progress_id, completed_at, viewed_at, created_at, updated_at
`

type CreateLessonProgressParams struct {
	LanguageSlug       string
	SeriesSlug         string
	SectionID          int32
	LessonID           int32
	LanguageProgressID int32
	SeriesProgressID   int32
	SectionProgressID  int32
	UserID             int32
}

// Copyright (C) 2024 Afonso Barracha
//
// This file is part of KiwiScript.
//
// KiwiScript is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// KiwiScript is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with KiwiScript.  If not, see <https://www.gnu.org/licenses/>.
func (q *Queries) CreateLessonProgress(ctx context.Context, arg CreateLessonProgressParams) (LessonProgress, error) {
	row := q.db.QueryRow(ctx, createLessonProgress,
		arg.LanguageSlug,
		arg.SeriesSlug,
		arg.SectionID,
		arg.LessonID,
		arg.LanguageProgressID,
		arg.SeriesProgressID,
		arg.SectionProgressID,
		arg.UserID,
	)
	var i LessonProgress
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.LanguageSlug,
		&i.SeriesSlug,
		&i.SectionID,
		&i.LessonID,
		&i.LanguageProgressID,
		&i.SeriesProgressID,
		&i.SectionProgressID,
		&i.CompletedAt,
		&i.ViewedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findLessonProgressBySlugsIDsAndUserID = `-- name: FindLessonProgressBySlugsIDsAndUserID :one
SELECT id, user_id, language_slug, series_slug, section_id, lesson_id, language_progress_id, series_progress_id, section_progress_id, completed_at, viewed_at, created_at, updated_at FROM "lesson_progress"
WHERE
    "language_slug" = $1 AND
    "series_slug" = $2 AND
    "section_id" = $3 AND
    "lesson_id" = $4 AND
    "user_id" = $5
LIMIT 1
`

type FindLessonProgressBySlugsIDsAndUserIDParams struct {
	LanguageSlug string
	SeriesSlug   string
	SectionID    int32
	LessonID     int32
	UserID       int32
}

func (q *Queries) FindLessonProgressBySlugsIDsAndUserID(ctx context.Context, arg FindLessonProgressBySlugsIDsAndUserIDParams) (LessonProgress, error) {
	row := q.db.QueryRow(ctx, findLessonProgressBySlugsIDsAndUserID,
		arg.LanguageSlug,
		arg.SeriesSlug,
		arg.SectionID,
		arg.LessonID,
		arg.UserID,
	)
	var i LessonProgress
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.LanguageSlug,
		&i.SeriesSlug,
		&i.SectionID,
		&i.LessonID,
		&i.LanguageProgressID,
		&i.SeriesProgressID,
		&i.SectionProgressID,
		&i.CompletedAt,
		&i.ViewedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const removedLessonProgressCompletedAt = `-- name: RemovedLessonProgressCompletedAt :exec
UPDATE "lesson_progress"
SET "completed_at" = NULL
WHERE "id" = $1
`

func (q *Queries) RemovedLessonProgressCompletedAt(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, removedLessonProgressCompletedAt, id)
	return err
}

const updateLessonProgressViewedAt = `-- name: UpdateLessonProgressViewedAt :exec
UPDATE "lesson_progress"
SET "viewed_at" = now()
WHERE "id" = $1
`

func (q *Queries) UpdateLessonProgressViewedAt(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, updateLessonProgressViewedAt, id)
	return err
}
