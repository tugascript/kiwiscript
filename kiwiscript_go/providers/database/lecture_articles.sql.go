// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: lecture_articles.sql

package db

import (
	"context"
)

const createLectureArticle = `-- name: CreateLectureArticle :one

INSERT INTO "lecture_articles" (
  "lecture_id",
  "content",
  "read_time_seconds"
) VALUES (
  $1,
  $2,
  $3
) RETURNING id, lecture_id, read_time_seconds, content, created_at, updated_at
`

type CreateLectureArticleParams struct {
	LectureID       int32
	Content         string
	ReadTimeSeconds int32
}

// Copyright (C) 2024 Afonso Barracha
//
// This file is part of KiwiScript.
//
// KiwiScript is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// KiwiScript is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with KiwiScript.  If not, see <https://www.gnu.org/licenses/>.
func (q *Queries) CreateLectureArticle(ctx context.Context, arg CreateLectureArticleParams) (LectureArticle, error) {
	row := q.db.QueryRow(ctx, createLectureArticle, arg.LectureID, arg.Content, arg.ReadTimeSeconds)
	var i LectureArticle
	err := row.Scan(
		&i.ID,
		&i.LectureID,
		&i.ReadTimeSeconds,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteLectureArticle = `-- name: DeleteLectureArticle :exec
DELETE FROM "lecture_articles"
WHERE "id" = $1
`

func (q *Queries) DeleteLectureArticle(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteLectureArticle, id)
	return err
}

const getLectureArticleByLectureID = `-- name: FindLectureArticleByLectureID :one
SELECT id, lecture_id, read_time_seconds, content, created_at, updated_at FROM "lecture_articles"
WHERE "lecture_id" = $1
LIMIT 1
`

func (q *Queries) GetLectureArticleByLectureID(ctx context.Context, lectureID int32) (LectureArticle, error) {
	row := q.db.QueryRow(ctx, getLectureArticleByLectureID, lectureID)
	var i LectureArticle
	err := row.Scan(
		&i.ID,
		&i.LectureID,
		&i.ReadTimeSeconds,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateLectureArticle = `-- name: UpdateLectureArticle :one
UPDATE "lecture_articles" SET
  "content" = $1,
  "read_time_seconds" = $2,
  "updated_at" = NOW()
WHERE "id" = $3
RETURNING id, lecture_id, read_time_seconds, content, created_at, updated_at
`

type UpdateLectureArticleParams struct {
	Content         string
	ReadTimeSeconds int32
	ID              int32
}

func (q *Queries) UpdateLectureArticle(ctx context.Context, arg UpdateLectureArticleParams) (LectureArticle, error) {
	row := q.db.QueryRow(ctx, updateLectureArticle, arg.Content, arg.ReadTimeSeconds, arg.ID)
	var i LectureArticle
	err := row.Scan(
		&i.ID,
		&i.LectureID,
		&i.ReadTimeSeconds,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
