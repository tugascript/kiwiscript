// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: auth_providers.sql

package db

import (
	"context"
)

const createAuthProvider = `-- name: CreateAuthProvider :exec
INSERT INTO "auth_providers" (
  "email",
  "provider"
) VALUES (
  $1,
  $2
)
`

type CreateAuthProviderParams struct {
	Email    string
	Provider string
}

func (q *Queries) CreateAuthProvider(ctx context.Context, arg CreateAuthProviderParams) error {
	_, err := q.db.Exec(ctx, createAuthProvider, arg.Email, arg.Provider)
	return err
}

const deleteProviderByEmailAndNotProvider = `-- name: DeleteProviderByEmailAndNotProvider :exec
DELETE FROM "auth_providers"
WHERE "email" = $1 AND "provider" <> $2
`

type DeleteProviderByEmailAndNotProviderParams struct {
	Email    string
	Provider string
}

func (q *Queries) DeleteProviderByEmailAndNotProvider(ctx context.Context, arg DeleteProviderByEmailAndNotProviderParams) error {
	_, err := q.db.Exec(ctx, deleteProviderByEmailAndNotProvider, arg.Email, arg.Provider)
	return err
}

const findAuthProviderByEmailAndProvider = `-- name: FindAuthProviderByEmailAndProvider :one
SELECT id, email, provider, created_at, updated_at FROM "auth_providers"
WHERE 
  "email" = $1 AND 
  "provider" = $2
LIMIT 1
`

type FindAuthProviderByEmailAndProviderParams struct {
	Email    string
	Provider string
}

func (q *Queries) FindAuthProviderByEmailAndProvider(ctx context.Context, arg FindAuthProviderByEmailAndProviderParams) (AuthProvider, error) {
	row := q.db.QueryRow(ctx, findAuthProviderByEmailAndProvider, arg.Email, arg.Provider)
	var i AuthProvider
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Provider,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
