// Copyright (C) 2024 Afonso Barracha
// 
// This file is part of KiwiScript.
// 
// KiwiScript is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// KiwiScript is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with KiwiScript.  If not, see <https://www.gnu.org/licenses/>.

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: language_categories.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createLanguageCategory = `-- name: CreateLanguageCategory :one
INSERT INTO "language_categories" (
  "language_id",
  "category_id"
) VALUES (
  $1,
  $2
) RETURNING language_id, category_id, created_at
`

type CreateLanguageCategoryParams struct {
	LanguageID int32
	CategoryID int32
}

func (q *Queries) CreateLanguageCategory(ctx context.Context, arg CreateLanguageCategoryParams) (LanguageCategory, error) {
	row := q.db.QueryRow(ctx, createLanguageCategory, arg.LanguageID, arg.CategoryID)
	var i LanguageCategory
	err := row.Scan(&i.LanguageID, &i.CategoryID, &i.CreatedAt)
	return i, err
}

const deleteLanguageCategory = `-- name: DeleteLanguageCategory :exec
DELETE FROM "language_categories"
WHERE "language_id" = $1 AND "category_id" = $2
`

type DeleteLanguageCategoryParams struct {
	LanguageID int32
	CategoryID int32
}

func (q *Queries) DeleteLanguageCategory(ctx context.Context, arg DeleteLanguageCategoryParams) error {
	_, err := q.db.Exec(ctx, deleteLanguageCategory, arg.LanguageID, arg.CategoryID)
	return err
}

const findCategoryLanguages = `-- name: FindCategoryLanguages :many
SELECT languages.id, languages.name, languages.icon, languages.author_id, languages.created_at, languages.updated_at FROM "language_categories"
LEFT JOIN "languages" ON "languages"."id" = "language_categories"."language_id"
WHERE "category_id" = $1
`

type FindCategoryLanguagesRow struct {
	ID        pgtype.Int4
	Name      pgtype.Text
	Icon      pgtype.Text
	AuthorID  pgtype.Int4
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
}

func (q *Queries) FindCategoryLanguages(ctx context.Context, categoryID int32) ([]FindCategoryLanguagesRow, error) {
	rows, err := q.db.Query(ctx, findCategoryLanguages, categoryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FindCategoryLanguagesRow{}
	for rows.Next() {
		var i FindCategoryLanguagesRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Icon,
			&i.AuthorID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findLanguageCategories = `-- name: FindLanguageCategories :many
SELECT categories.id, categories.title, categories.slug, categories.description, categories.author_id, categories.created_at, categories.updated_at FROM "language_categories"
LEFT JOIN "categories" ON "categories"."id" = "language_categories"."category_id"
WHERE "language_id" = $1
`

type FindLanguageCategoriesRow struct {
	ID          pgtype.Int4
	Title       pgtype.Text
	Slug        pgtype.Text
	Description pgtype.Text
	AuthorID    pgtype.Int4
	CreatedAt   pgtype.Timestamp
	UpdatedAt   pgtype.Timestamp
}

func (q *Queries) FindLanguageCategories(ctx context.Context, languageID int32) ([]FindLanguageCategoriesRow, error) {
	rows, err := q.db.Query(ctx, findLanguageCategories, languageID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FindLanguageCategoriesRow{}
	for rows.Next() {
		var i FindLanguageCategoriesRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Slug,
			&i.Description,
			&i.AuthorID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
