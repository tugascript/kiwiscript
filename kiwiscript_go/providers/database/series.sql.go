// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: series.sql

package db

import (
	"context"
)

const addSeriesPartsCount = `-- name: AddSeriesPartsCount :exec
UPDATE "series" SET
  "series_parts_count" = "series_parts_count" + 1,
  "lectures_count" = "lectures_count" + $2
WHERE "id" = $1
`

type AddSeriesPartsCountParams struct {
	ID            int32
	LecturesCount int16
}

func (q *Queries) AddSeriesPartsCount(ctx context.Context, arg AddSeriesPartsCountParams) error {
	_, err := q.db.Exec(ctx, addSeriesPartsCount, arg.ID, arg.LecturesCount)
	return err
}

const createSeries = `-- name: CreateSeries :one

INSERT INTO "series" (
  "title",
  "slug",
  "description",
  "author_id"
) VALUES (
  $1,
  $2,
  $3,
  $4
) RETURNING id, title, slug, description, parts_count, lectures_count, total_duration_seconds, review_avg, review_count, is_published, author_id, created_at, updated_at
`

type CreateSeriesParams struct {
	Title       string
	Slug        string
	Description string
	AuthorID    int32
}

// Copyright (C) 2024 Afonso Barracha
//
// This file is part of KiwiScript.
//
// KiwiScript is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// KiwiScript is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with KiwiScript.  If not, see <https://www.gnu.org/licenses/>.
func (q *Queries) CreateSeries(ctx context.Context, arg CreateSeriesParams) (Series, error) {
	row := q.db.QueryRow(ctx, createSeries,
		arg.Title,
		arg.Slug,
		arg.Description,
		arg.AuthorID,
	)
	var i Series
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Slug,
		&i.Description,
		&i.PartsCount,
		&i.LecturesCount,
		&i.TotalDurationSeconds,
		&i.ReviewAvg,
		&i.ReviewCount,
		&i.IsPublished,
		&i.AuthorID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const decrementSeriesLecturesCount = `-- name: DecrementSeriesLecturesCount :exec
UPDATE "series" SET
  "lectures_count" = "lectures_count" - 1
WHERE "id" = $1
`

func (q *Queries) DecrementSeriesLecturesCount(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, decrementSeriesLecturesCount, id)
	return err
}

const decrementSeriesPartsCount = `-- name: DecrementSeriesPartsCount :exec
UPDATE "series" SET
  "series_parts_count" = "series_parts_count" - 1,
  "lectures_count" = "lectures_count" - $2
WHERE "id" = $1
`

type DecrementSeriesPartsCountParams struct {
	ID            int32
	LecturesCount int16
}

func (q *Queries) DecrementSeriesPartsCount(ctx context.Context, arg DecrementSeriesPartsCountParams) error {
	_, err := q.db.Exec(ctx, decrementSeriesPartsCount, arg.ID, arg.LecturesCount)
	return err
}

const deleteSeriesById = `-- name: DeleteSeriesById :exec
DELETE FROM "series"
WHERE "id" = $1
`

func (q *Queries) DeleteSeriesById(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteSeriesById, id)
	return err
}

const findAllSeriesOrderById = `-- name: FindAllSeriesOrderById :many
SELECT id, title, slug, description, parts_count, lectures_count, total_duration_seconds, review_avg, review_count, is_published, author_id, created_at, updated_at FROM "series"
ORDER BY "id" DESC
`

func (q *Queries) FindAllSeriesOrderById(ctx context.Context) ([]Series, error) {
	rows, err := q.db.Query(ctx, findAllSeriesOrderById)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Series{}
	for rows.Next() {
		var i Series
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Slug,
			&i.Description,
			&i.PartsCount,
			&i.LecturesCount,
			&i.TotalDurationSeconds,
			&i.ReviewAvg,
			&i.ReviewCount,
			&i.IsPublished,
			&i.AuthorID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findAllSeriesOrderBySlug = `-- name: FindAllSeriesOrderBySlug :many
SELECT id, title, slug, description, parts_count, lectures_count, total_duration_seconds, review_avg, review_count, is_published, author_id, created_at, updated_at FROM "series"
ORDER BY "slug" ASC
`

func (q *Queries) FindAllSeriesOrderBySlug(ctx context.Context) ([]Series, error) {
	rows, err := q.db.Query(ctx, findAllSeriesOrderBySlug)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Series{}
	for rows.Next() {
		var i Series
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Slug,
			&i.Description,
			&i.PartsCount,
			&i.LecturesCount,
			&i.TotalDurationSeconds,
			&i.ReviewAvg,
			&i.ReviewCount,
			&i.IsPublished,
			&i.AuthorID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findPaginatedSeriesOrderById = `-- name: FindPaginatedSeriesOrderById :many
SELECT id, title, slug, description, parts_count, lectures_count, total_duration_seconds, review_avg, review_count, is_published, author_id, created_at, updated_at FROM "series"
ORDER BY "id" DESC
LIMIT $1 OFFSET $2
`

type FindPaginatedSeriesOrderByIdParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) FindPaginatedSeriesOrderById(ctx context.Context, arg FindPaginatedSeriesOrderByIdParams) ([]Series, error) {
	rows, err := q.db.Query(ctx, findPaginatedSeriesOrderById, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Series{}
	for rows.Next() {
		var i Series
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Slug,
			&i.Description,
			&i.PartsCount,
			&i.LecturesCount,
			&i.TotalDurationSeconds,
			&i.ReviewAvg,
			&i.ReviewCount,
			&i.IsPublished,
			&i.AuthorID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findPaginatedSeriesOrderBySlug = `-- name: FindPaginatedSeriesOrderBySlug :many
SELECT id, title, slug, description, parts_count, lectures_count, total_duration_seconds, review_avg, review_count, is_published, author_id, created_at, updated_at FROM "series"
ORDER BY "slug" ASC
LIMIT $1 OFFSET $2
`

type FindPaginatedSeriesOrderBySlugParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) FindPaginatedSeriesOrderBySlug(ctx context.Context, arg FindPaginatedSeriesOrderBySlugParams) ([]Series, error) {
	rows, err := q.db.Query(ctx, findPaginatedSeriesOrderBySlug, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Series{}
	for rows.Next() {
		var i Series
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Slug,
			&i.Description,
			&i.PartsCount,
			&i.LecturesCount,
			&i.TotalDurationSeconds,
			&i.ReviewAvg,
			&i.ReviewCount,
			&i.IsPublished,
			&i.AuthorID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findSeriesById = `-- name: FindSeriesById :one
SELECT id, title, slug, description, parts_count, lectures_count, total_duration_seconds, review_avg, review_count, is_published, author_id, created_at, updated_at FROM "series"
WHERE "id" = $1 LIMIT 1
`

func (q *Queries) FindSeriesById(ctx context.Context, id int32) (Series, error) {
	row := q.db.QueryRow(ctx, findSeriesById, id)
	var i Series
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Slug,
		&i.Description,
		&i.PartsCount,
		&i.LecturesCount,
		&i.TotalDurationSeconds,
		&i.ReviewAvg,
		&i.ReviewCount,
		&i.IsPublished,
		&i.AuthorID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findSeriesBySlug = `-- name: FindSeriesBySlug :one
SELECT id, title, slug, description, parts_count, lectures_count, total_duration_seconds, review_avg, review_count, is_published, author_id, created_at, updated_at FROM "series"
WHERE "slug" = $1 LIMIT 1
`

func (q *Queries) FindSeriesBySlug(ctx context.Context, slug string) (Series, error) {
	row := q.db.QueryRow(ctx, findSeriesBySlug, slug)
	var i Series
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Slug,
		&i.Description,
		&i.PartsCount,
		&i.LecturesCount,
		&i.TotalDurationSeconds,
		&i.ReviewAvg,
		&i.ReviewCount,
		&i.IsPublished,
		&i.AuthorID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const incrementSeriesLecturesCount = `-- name: IncrementSeriesLecturesCount :exec
UPDATE "series" SET
  "lectures_count" = "lectures_count" + 1
WHERE "id" = $1
`

func (q *Queries) IncrementSeriesLecturesCount(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, incrementSeriesLecturesCount, id)
	return err
}

const incrementSeriesReviewCount = `-- name: IncrementSeriesReviewCount :exec
UPDATE "series" SET
  "review_count" = "review_count" + 1
WHERE "id" = $1
`

func (q *Queries) IncrementSeriesReviewCount(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, incrementSeriesReviewCount, id)
	return err
}

const updateSeries = `-- name: UpdateSeries :one
UPDATE "series" SET
  "title" = $1,
  "slug" = $2,
  "description" = $3
WHERE "id" = $4
RETURNING id, title, slug, description, parts_count, lectures_count, total_duration_seconds, review_avg, review_count, is_published, author_id, created_at, updated_at
`

type UpdateSeriesParams struct {
	Title       string
	Slug        string
	Description string
	ID          int32
}

func (q *Queries) UpdateSeries(ctx context.Context, arg UpdateSeriesParams) (Series, error) {
	row := q.db.QueryRow(ctx, updateSeries,
		arg.Title,
		arg.Slug,
		arg.Description,
		arg.ID,
	)
	var i Series
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Slug,
		&i.Description,
		&i.PartsCount,
		&i.LecturesCount,
		&i.TotalDurationSeconds,
		&i.ReviewAvg,
		&i.ReviewCount,
		&i.IsPublished,
		&i.AuthorID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateSeriesIsPublished = `-- name: UpdateSeriesIsPublished :one
UPDATE "series" SET
  "is_published" = $1
WHERE "id" = $2
RETURNING id, title, slug, description, parts_count, lectures_count, total_duration_seconds, review_avg, review_count, is_published, author_id, created_at, updated_at
`

type UpdateSeriesIsPublishedParams struct {
	IsPublished bool
	ID          int32
}

func (q *Queries) UpdateSeriesIsPublished(ctx context.Context, arg UpdateSeriesIsPublishedParams) (Series, error) {
	row := q.db.QueryRow(ctx, updateSeriesIsPublished, arg.IsPublished, arg.ID)
	var i Series
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Slug,
		&i.Description,
		&i.PartsCount,
		&i.LecturesCount,
		&i.TotalDurationSeconds,
		&i.ReviewAvg,
		&i.ReviewCount,
		&i.IsPublished,
		&i.AuthorID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateSeriesReviewAvg = `-- name: UpdateSeriesReviewAvg :exec
UPDATE "series" SET
  "review_avg" = $1
WHERE "id" = $2
`

type UpdateSeriesReviewAvgParams struct {
	ReviewAvg int16
	ID        int32
}

func (q *Queries) UpdateSeriesReviewAvg(ctx context.Context, arg UpdateSeriesReviewAvgParams) error {
	_, err := q.db.Exec(ctx, updateSeriesReviewAvg, arg.ReviewAvg, arg.ID)
	return err
}
