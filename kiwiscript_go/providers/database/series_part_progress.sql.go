// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: series_part_progress.sql

package db

import (
	"context"
)

const createSeriesPartProgress = `-- name: CreateSeriesPartProgress :one

INSERT INTO "series_part_progress" (
  "language_slug",
  "series_slug",
  "series_part_id",
  "language_progress_id",
  "series_progress_id",
  "user_id",
  "is_current"
) VALUES (
  $1,
  $2,
  $3,
  $4,
  $5,
  $6,
  true
) RETURNING id, user_id, language_slug, series_slug, series_part_id, language_progress_id, series_progress_id, in_progress_lectures, completed_lectures, is_current, completed_at, created_at, updated_at
`

type CreateSeriesPartProgressParams struct {
	LanguageSlug       string
	SeriesSlug         string
	SeriesPartID       int32
	LanguageProgressID int32
	SeriesProgressID   int32
	UserID             int32
}

// Copyright (C) 2024 Afonso Barracha
//
// This file is part of KiwiScript.
//
// KiwiScript is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// KiwiScript is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with KiwiScript.  If not, see <https://www.gnu.org/licenses/>.
func (q *Queries) CreateSeriesPartProgress(ctx context.Context, arg CreateSeriesPartProgressParams) (SeriesPartProgress, error) {
	row := q.db.QueryRow(ctx, createSeriesPartProgress,
		arg.LanguageSlug,
		arg.SeriesSlug,
		arg.SeriesPartID,
		arg.LanguageProgressID,
		arg.SeriesProgressID,
		arg.UserID,
	)
	var i SeriesPartProgress
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.LanguageSlug,
		&i.SeriesSlug,
		&i.SeriesPartID,
		&i.LanguageProgressID,
		&i.SeriesProgressID,
		&i.InProgressLectures,
		&i.CompletedLectures,
		&i.IsCurrent,
		&i.CompletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSeriesPartProgress = `-- name: DeleteSeriesPartProgress :exec
DELETE FROM "series_part_progress"
WHERE "id" = $1
`

func (q *Queries) DeleteSeriesPartProgress(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteSeriesPartProgress, id)
	return err
}

const findSeriesPartProgressBySeriesProgressID = `-- name: FindSeriesPartProgressBySeriesProgressID :many
SELECT id, user_id, language_slug, series_slug, series_part_id, language_progress_id, series_progress_id, in_progress_lectures, completed_lectures, is_current, completed_at, created_at, updated_at FROM "series_part_progress"
WHERE "series_progress_id" = $1
ORDER BY "id" DESC
`

func (q *Queries) FindSeriesPartProgressBySeriesProgressID(ctx context.Context, seriesProgressID int32) ([]SeriesPartProgress, error) {
	rows, err := q.db.Query(ctx, findSeriesPartProgressBySeriesProgressID, seriesProgressID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SeriesPartProgress{}
	for rows.Next() {
		var i SeriesPartProgress
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.LanguageSlug,
			&i.SeriesSlug,
			&i.SeriesPartID,
			&i.LanguageProgressID,
			&i.SeriesProgressID,
			&i.InProgressLectures,
			&i.CompletedLectures,
			&i.IsCurrent,
			&i.CompletedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findSeriesPartProgressBySlugsAndUserID = `-- name: FindSeriesPartProgressBySlugsAndUserID :one
SELECT id, user_id, language_slug, series_slug, series_part_id, language_progress_id, series_progress_id, in_progress_lectures, completed_lectures, is_current, completed_at, created_at, updated_at FROM "series_part_progress"
WHERE
    "language_slug" = $1 AND
    "series_slug" = $2 AND
    "series_part_id" = $3 AND
    "user_id" = $4
LIMIT 1
`

type FindSeriesPartProgressBySlugsAndUserIDParams struct {
	LanguageSlug string
	SeriesSlug   string
	SeriesPartID int32
	UserID       int32
}

func (q *Queries) FindSeriesPartProgressBySlugsAndUserID(ctx context.Context, arg FindSeriesPartProgressBySlugsAndUserIDParams) (SeriesPartProgress, error) {
	row := q.db.QueryRow(ctx, findSeriesPartProgressBySlugsAndUserID,
		arg.LanguageSlug,
		arg.SeriesSlug,
		arg.SeriesPartID,
		arg.UserID,
	)
	var i SeriesPartProgress
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.LanguageSlug,
		&i.SeriesSlug,
		&i.SeriesPartID,
		&i.LanguageProgressID,
		&i.SeriesProgressID,
		&i.InProgressLectures,
		&i.CompletedLectures,
		&i.IsCurrent,
		&i.CompletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const setSeriesPartProgressIsCurrentFalse = `-- name: SetSeriesPartProgressIsCurrentFalse :exec
UPDATE "series_part_progress" SET
    "is_current" = false
WHERE
    "user_id" = $1 AND
    "language_slug" = $2 AND
    "series_slug" = $3 AND
    "series_part_id" <> $4
`

type SetSeriesPartProgressIsCurrentFalseParams struct {
	UserID       int32
	LanguageSlug string
	SeriesSlug   string
	SeriesPartID int32
}

func (q *Queries) SetSeriesPartProgressIsCurrentFalse(ctx context.Context, arg SetSeriesPartProgressIsCurrentFalseParams) error {
	_, err := q.db.Exec(ctx, setSeriesPartProgressIsCurrentFalse,
		arg.UserID,
		arg.LanguageSlug,
		arg.SeriesSlug,
		arg.SeriesPartID,
	)
	return err
}

const setSeriesPartProgressIsCurrentTrue = `-- name: SetSeriesPartProgressIsCurrentTrue :one
UPDATE "series_part_progress" SET
  "is_current" = true
WHERE "id" = $1
RETURNING id, user_id, language_slug, series_slug, series_part_id, language_progress_id, series_progress_id, in_progress_lectures, completed_lectures, is_current, completed_at, created_at, updated_at
`

func (q *Queries) SetSeriesPartProgressIsCurrentTrue(ctx context.Context, id int32) (SeriesPartProgress, error) {
	row := q.db.QueryRow(ctx, setSeriesPartProgressIsCurrentTrue, id)
	var i SeriesPartProgress
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.LanguageSlug,
		&i.SeriesSlug,
		&i.SeriesPartID,
		&i.LanguageProgressID,
		&i.SeriesProgressID,
		&i.InProgressLectures,
		&i.CompletedLectures,
		&i.IsCurrent,
		&i.CompletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
