// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: series_part_progress.sql

package db

import (
	"context"
)

const completeAndIncrementSeriesPartProgressLecturesCount = `-- name: CompleteAndIncrementSeriesPartProgressLecturesCount :exec
UPDATE "series_part_progress" SET
  "is_completed" = true,
  "lectures_count" = "lectures_count" + 1,
  "completed_at" = NOW()
WHERE "id" = $1
`

func (q *Queries) CompleteAndIncrementSeriesPartProgressLecturesCount(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, completeAndIncrementSeriesPartProgressLecturesCount, id)
	return err
}

const createSeriesPartProgress = `-- name: CreateSeriesPartProgress :one
INSERT INTO "series_part_progress" (
  "user_id",
  "series_part_id",
  "language_id",
  "series_progress_id"
) VALUES (
  $1,
  $2,
  $3,
  $4
) RETURNING id, user_id, series_part_id, language_id, series_progress_id, lectures_count, is_completed, completed_at, created_at, updated_at
`

type CreateSeriesPartProgressParams struct {
	UserID           int32
	SeriesPartID     int32
	LanguageID       int32
	SeriesProgressID int32
}

func (q *Queries) CreateSeriesPartProgress(ctx context.Context, arg CreateSeriesPartProgressParams) (SeriesPartProgress, error) {
	row := q.db.QueryRow(ctx, createSeriesPartProgress,
		arg.UserID,
		arg.SeriesPartID,
		arg.LanguageID,
		arg.SeriesProgressID,
	)
	var i SeriesPartProgress
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SeriesPartID,
		&i.LanguageID,
		&i.SeriesProgressID,
		&i.LecturesCount,
		&i.IsCompleted,
		&i.CompletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const decrementSeriesPartProgressLecturesCount = `-- name: DecrementSeriesPartProgressLecturesCount :exec
UPDATE "series_part_progress" SET
  "lectures_count" = "lectures_count" - 1
WHERE "id" = $1
`

func (q *Queries) DecrementSeriesPartProgressLecturesCount(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, decrementSeriesPartProgressLecturesCount, id)
	return err
}

const incrementSeriesPartProgressLecturesCount = `-- name: IncrementSeriesPartProgressLecturesCount :exec
UPDATE "series_part_progress" SET
  "lectures_count" = "lectures_count" + 1
WHERE "id" = $1
`

func (q *Queries) IncrementSeriesPartProgressLecturesCount(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, incrementSeriesPartProgressLecturesCount, id)
	return err
}

const uncompleteAndDecrementSeriesPartProgressLecturesCount = `-- name: UncompleteAndDecrementSeriesPartProgressLecturesCount :exec
UPDATE "series_part_progress" SET
  "is_completed" = false,
  "lectures_count" = "lectures_count" - 1,
  "completed_at" = NULL
WHERE "id" = $1
`

func (q *Queries) UncompleteAndDecrementSeriesPartProgressLecturesCount(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, uncompleteAndDecrementSeriesPartProgressLecturesCount, id)
	return err
}
