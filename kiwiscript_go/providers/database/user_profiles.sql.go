// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user_profiles.sql

package db

import (
	"context"
)

const createUserProfile = `-- name: CreateUserProfile :one

INSERT INTO "user_profiles" (
    "user_id",
    "bio",
    "github",
    "linkedin",
    "website"
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5
) RETURNING id, user_id, bio, github, linkedin, website, created_at, updated_at
`

type CreateUserProfileParams struct {
	UserID   int32
	Bio      string
	Github   string
	Linkedin string
	Website  string
}

// Copyright (C) 2024 Afonso Barracha
//
// This file is part of KiwiScript.
//
// KiwiScript is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// KiwiScript is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with KiwiScript.  If not, see <https://www.gnu.org/licenses/>.
func (q *Queries) CreateUserProfile(ctx context.Context, arg CreateUserProfileParams) (UserProfile, error) {
	row := q.db.QueryRow(ctx, createUserProfile,
		arg.UserID,
		arg.Bio,
		arg.Github,
		arg.Linkedin,
		arg.Website,
	)
	var i UserProfile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Bio,
		&i.Github,
		&i.Linkedin,
		&i.Website,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUserProfile = `-- name: DeleteUserProfile :exec
DELETE FROM "user_profiles"
WHERE "id" = $1
`

func (q *Queries) DeleteUserProfile(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUserProfile, id)
	return err
}

const findUserProfileByUserID = `-- name: FindUserProfileByUserID :one
SELECT id, user_id, bio, github, linkedin, website, created_at, updated_at FROM "user_profiles"
WHERE "user_id" = $1
LIMIT 1
`

func (q *Queries) FindUserProfileByUserID(ctx context.Context, userID int32) (UserProfile, error) {
	row := q.db.QueryRow(ctx, findUserProfileByUserID, userID)
	var i UserProfile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Bio,
		&i.Github,
		&i.Linkedin,
		&i.Website,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserProfile = `-- name: UpdateUserProfile :one
UPDATE "user_profiles" SET
  "bio" = $1,
  "github" = $2,
  "linkedin" = $3,
  "website" = $4,
  "updated_at" = NOW()
WHERE "id" = $5
RETURNING id, user_id, bio, github, linkedin, website, created_at, updated_at
`

type UpdateUserProfileParams struct {
	Bio      string
	Github   string
	Linkedin string
	Website  string
	ID       int32
}

func (q *Queries) UpdateUserProfile(ctx context.Context, arg UpdateUserProfileParams) (UserProfile, error) {
	row := q.db.QueryRow(ctx, updateUserProfile,
		arg.Bio,
		arg.Github,
		arg.Linkedin,
		arg.Website,
		arg.ID,
	)
	var i UserProfile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Bio,
		&i.Github,
		&i.Linkedin,
		&i.Website,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
