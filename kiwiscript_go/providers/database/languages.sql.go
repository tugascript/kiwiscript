// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: languages.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countFilteredLanguages = `-- name: CountFilteredLanguages :one
SELECT COUNT("id") FROM "languages"
WHERE "name" ILIKE $1
`

func (q *Queries) CountFilteredLanguages(ctx context.Context, name string) (int64, error) {
	row := q.db.QueryRow(ctx, countFilteredLanguages, name)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countLanguages = `-- name: CountLanguages :one
SELECT COUNT("id") FROM "languages"
`

func (q *Queries) CountLanguages(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countLanguages)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createLanguage = `-- name: CreateLanguage :one

INSERT INTO "languages" (
  "name",
  "slug",
  "icon",
  "author_id"
) VALUES (
  $1,
  $2,
  $3,
  $4
) RETURNING id, name, slug, icon, series_count, author_id, created_at, updated_at
`

type CreateLanguageParams struct {
	Name     string
	Slug     string
	Icon     string
	AuthorID int32
}

// Copyright (C) 2024 Afonso Barracha
//
// This file is part of KiwiScript.
//
// KiwiScript is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// KiwiScript is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with KiwiScript.  If not, see <https://www.gnu.org/licenses/>.
func (q *Queries) CreateLanguage(ctx context.Context, arg CreateLanguageParams) (Language, error) {
	row := q.db.QueryRow(ctx, createLanguage,
		arg.Name,
		arg.Slug,
		arg.Icon,
		arg.AuthorID,
	)
	var i Language
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.Icon,
		&i.SeriesCount,
		&i.AuthorID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const decrementLanguageSeriesCount = `-- name: DecrementLanguageSeriesCount :exec
UPDATE "languages" SET
  "series_count" = "series_count" - 1
WHERE "slug" = $1
`

func (q *Queries) DecrementLanguageSeriesCount(ctx context.Context, slug string) error {
	_, err := q.db.Exec(ctx, decrementLanguageSeriesCount, slug)
	return err
}

const deleteAllLanguages = `-- name: DeleteAllLanguages :exec
DELETE FROM "languages"
`

func (q *Queries) DeleteAllLanguages(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteAllLanguages)
	return err
}

const deleteLanguageById = `-- name: DeleteLanguageById :exec
DELETE FROM "languages"
WHERE "id" = $1
`

func (q *Queries) DeleteLanguageById(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteLanguageById, id)
	return err
}

const findAllLanguages = `-- name: FindAllLanguages :many
SELECT id, name, slug, icon, series_count, author_id, created_at, updated_at FROM "languages"
ORDER BY "slug" ASC
`

func (q *Queries) FindAllLanguages(ctx context.Context) ([]Language, error) {
	rows, err := q.db.Query(ctx, findAllLanguages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Language{}
	for rows.Next() {
		var i Language
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Slug,
			&i.Icon,
			&i.SeriesCount,
			&i.AuthorID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findFilteredPaginatedLanguages = `-- name: FindFilteredPaginatedLanguages :many
SELECT id, name, slug, icon, series_count, author_id, created_at, updated_at FROM "languages"
WHERE "name" ILIKE $1
ORDER BY "slug" ASC
LIMIT $2 OFFSET $3
`

type FindFilteredPaginatedLanguagesParams struct {
	Name   string
	Limit  int32
	Offset int32
}

func (q *Queries) FindFilteredPaginatedLanguages(ctx context.Context, arg FindFilteredPaginatedLanguagesParams) ([]Language, error) {
	rows, err := q.db.Query(ctx, findFilteredPaginatedLanguages, arg.Name, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Language{}
	for rows.Next() {
		var i Language
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Slug,
			&i.Icon,
			&i.SeriesCount,
			&i.AuthorID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findFilteredPaginatedLanguagesWithLanguageProgress = `-- name: FindFilteredPaginatedLanguagesWithLanguageProgress :many
SELECT
    languages.id, languages.name, languages.slug, languages.icon, languages.series_count, languages.author_id, languages.created_at, languages.updated_at,
    "language_progress"."completed_series" AS "language_progress_completed_series",
    "language_progress"."viewed_at" AS "language_progress_viewed_at"
FROM "languages"
LEFT JOIN "language_progress" ON "languages"."slug" = "language_progress"."language_slug"
WHERE "language_progress"."user_id" = $1 AND "languages"."name" ILIKE $2
ORDER BY "languages"."slug" ASC
LIMIT $3 OFFSET $4
`

type FindFilteredPaginatedLanguagesWithLanguageProgressParams struct {
	UserID int32
	Name   string
	Limit  int32
	Offset int32
}

type FindFilteredPaginatedLanguagesWithLanguageProgressRow struct {
	ID                              int32
	Name                            string
	Slug                            string
	Icon                            string
	SeriesCount                     int16
	AuthorID                        int32
	CreatedAt                       pgtype.Timestamp
	UpdatedAt                       pgtype.Timestamp
	LanguageProgressCompletedSeries pgtype.Int2
	LanguageProgressViewedAt        pgtype.Timestamp
}

func (q *Queries) FindFilteredPaginatedLanguagesWithLanguageProgress(ctx context.Context, arg FindFilteredPaginatedLanguagesWithLanguageProgressParams) ([]FindFilteredPaginatedLanguagesWithLanguageProgressRow, error) {
	rows, err := q.db.Query(ctx, findFilteredPaginatedLanguagesWithLanguageProgress,
		arg.UserID,
		arg.Name,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FindFilteredPaginatedLanguagesWithLanguageProgressRow{}
	for rows.Next() {
		var i FindFilteredPaginatedLanguagesWithLanguageProgressRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Slug,
			&i.Icon,
			&i.SeriesCount,
			&i.AuthorID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.LanguageProgressCompletedSeries,
			&i.LanguageProgressViewedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findLanguageById = `-- name: FindLanguageById :one
SELECT id, name, slug, icon, series_count, author_id, created_at, updated_at FROM "languages"
WHERE "id" = $1 LIMIT 1
`

func (q *Queries) FindLanguageById(ctx context.Context, id int32) (Language, error) {
	row := q.db.QueryRow(ctx, findLanguageById, id)
	var i Language
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.Icon,
		&i.SeriesCount,
		&i.AuthorID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findLanguageBySlug = `-- name: FindLanguageBySlug :one
SELECT id, name, slug, icon, series_count, author_id, created_at, updated_at FROM "languages"
WHERE "slug" = $1 LIMIT 1
`

func (q *Queries) FindLanguageBySlug(ctx context.Context, slug string) (Language, error) {
	row := q.db.QueryRow(ctx, findLanguageBySlug, slug)
	var i Language
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.Icon,
		&i.SeriesCount,
		&i.AuthorID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findLanguageBySlugWithLanguageProgress = `-- name: FindLanguageBySlugWithLanguageProgress :one
SELECT
    languages.id, languages.name, languages.slug, languages.icon, languages.series_count, languages.author_id, languages.created_at, languages.updated_at,
    "language_progress"."completed_series" AS "completed_series",
    "language_progress"."viewed_at" AS "viewed_at"
FROM "languages"
LEFT JOIN "language_progress" ON (
    "languages"."slug" = "language_progress"."language_slug" AND
    "language_progress"."user_id" = $1
)
WHERE "languages"."slug" = $2
LIMIT 1
`

type FindLanguageBySlugWithLanguageProgressParams struct {
	UserID int32
	Slug   string
}

type FindLanguageBySlugWithLanguageProgressRow struct {
	ID              int32
	Name            string
	Slug            string
	Icon            string
	SeriesCount     int16
	AuthorID        int32
	CreatedAt       pgtype.Timestamp
	UpdatedAt       pgtype.Timestamp
	CompletedSeries pgtype.Int2
	ViewedAt        pgtype.Timestamp
}

func (q *Queries) FindLanguageBySlugWithLanguageProgress(ctx context.Context, arg FindLanguageBySlugWithLanguageProgressParams) (FindLanguageBySlugWithLanguageProgressRow, error) {
	row := q.db.QueryRow(ctx, findLanguageBySlugWithLanguageProgress, arg.UserID, arg.Slug)
	var i FindLanguageBySlugWithLanguageProgressRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.Icon,
		&i.SeriesCount,
		&i.AuthorID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CompletedSeries,
		&i.ViewedAt,
	)
	return i, err
}

const findPaginatedLanguages = `-- name: FindPaginatedLanguages :many
SELECT id, name, slug, icon, series_count, author_id, created_at, updated_at FROM "languages"
ORDER BY "slug" ASC
LIMIT $1 OFFSET $2
`

type FindPaginatedLanguagesParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) FindPaginatedLanguages(ctx context.Context, arg FindPaginatedLanguagesParams) ([]Language, error) {
	rows, err := q.db.Query(ctx, findPaginatedLanguages, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Language{}
	for rows.Next() {
		var i Language
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Slug,
			&i.Icon,
			&i.SeriesCount,
			&i.AuthorID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findPaginatedLanguagesWithLanguageProgress = `-- name: FindPaginatedLanguagesWithLanguageProgress :many
SELECT
    languages.id, languages.name, languages.slug, languages.icon, languages.series_count, languages.author_id, languages.created_at, languages.updated_at,
    "language_progress"."completed_series" AS "language_progress_completed_series",
    "language_progress"."viewed_at" AS "language_progress_viewed_at"
FROM "languages"
LEFT JOIN "language_progress" ON (
    "languages"."slug" = "language_progress"."language_slug" AND
    "language_progress"."user_id" = $1
)
ORDER BY "languages"."slug" ASC
LIMIT $2 OFFSET $3
`

type FindPaginatedLanguagesWithLanguageProgressParams struct {
	UserID int32
	Limit  int32
	Offset int32
}

type FindPaginatedLanguagesWithLanguageProgressRow struct {
	ID                              int32
	Name                            string
	Slug                            string
	Icon                            string
	SeriesCount                     int16
	AuthorID                        int32
	CreatedAt                       pgtype.Timestamp
	UpdatedAt                       pgtype.Timestamp
	LanguageProgressCompletedSeries pgtype.Int2
	LanguageProgressViewedAt        pgtype.Timestamp
}

func (q *Queries) FindPaginatedLanguagesWithLanguageProgress(ctx context.Context, arg FindPaginatedLanguagesWithLanguageProgressParams) ([]FindPaginatedLanguagesWithLanguageProgressRow, error) {
	rows, err := q.db.Query(ctx, findPaginatedLanguagesWithLanguageProgress, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FindPaginatedLanguagesWithLanguageProgressRow{}
	for rows.Next() {
		var i FindPaginatedLanguagesWithLanguageProgressRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Slug,
			&i.Icon,
			&i.SeriesCount,
			&i.AuthorID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.LanguageProgressCompletedSeries,
			&i.LanguageProgressViewedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const incrementLanguageSeriesCount = `-- name: IncrementLanguageSeriesCount :exec
UPDATE "languages" SET
  "series_count" = "series_count" + 1
WHERE "slug" = $1
`

func (q *Queries) IncrementLanguageSeriesCount(ctx context.Context, slug string) error {
	_, err := q.db.Exec(ctx, incrementLanguageSeriesCount, slug)
	return err
}

const updateLanguage = `-- name: UpdateLanguage :one
UPDATE "languages" SET
  "name" = $1,
  "icon" = $2,
  "slug" = $3
WHERE "id" = $4
RETURNING id, name, slug, icon, series_count, author_id, created_at, updated_at
`

type UpdateLanguageParams struct {
	Name string
	Icon string
	Slug string
	ID   int32
}

func (q *Queries) UpdateLanguage(ctx context.Context, arg UpdateLanguageParams) (Language, error) {
	row := q.db.QueryRow(ctx, updateLanguage,
		arg.Name,
		arg.Icon,
		arg.Slug,
		arg.ID,
	)
	var i Language
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.Icon,
		&i.SeriesCount,
		&i.AuthorID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
