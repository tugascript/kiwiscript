// Copyright (C) 2024 Afonso Barracha
// 
// This file is part of KiwiScript.
// 
// KiwiScript is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// KiwiScript is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with KiwiScript.  If not, see <https://www.gnu.org/licenses/>.

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: lecture_progress.sql

package db

import (
	"context"
)

const completeLectureProgress = `-- name: CompleteLectureProgress :exec
UPDATE "lecture_progress" SET
  "is_completed" = true,
  "completed_at" = NOW()
WHERE "id" = $1
`

func (q *Queries) CompleteLectureProgress(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, completeLectureProgress, id)
	return err
}

const createLectureProgress = `-- name: CreateLectureProgress :one
INSERT INTO "lecture_progress" (
  "user_id",
  "lecture_id",
  "language_id",
  "series_progress_id",
  "series_part_progress_id"
) VALUES (
  $1,
  $2,
  $3,
  $4,
  $5
) RETURNING id, user_id, language_id, lecture_id, series_progress_id, series_part_progress_id, is_completed, completed_at, created_at, updated_at
`

type CreateLectureProgressParams struct {
	UserID               int32
	LectureID            int32
	LanguageID           int32
	SeriesProgressID     int32
	SeriesPartProgressID int32
}

func (q *Queries) CreateLectureProgress(ctx context.Context, arg CreateLectureProgressParams) (LectureProgress, error) {
	row := q.db.QueryRow(ctx, createLectureProgress,
		arg.UserID,
		arg.LectureID,
		arg.LanguageID,
		arg.SeriesProgressID,
		arg.SeriesPartProgressID,
	)
	var i LectureProgress
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.LanguageID,
		&i.LectureID,
		&i.SeriesProgressID,
		&i.SeriesPartProgressID,
		&i.IsCompleted,
		&i.CompletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const uncompleteLectureProgress = `-- name: UncompleteLectureProgress :exec
UPDATE "lecture_progress" SET
  "is_completed" = false,
  "completed_at" = NULL
WHERE "id" = $1
`

func (q *Queries) UncompleteLectureProgress(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, uncompleteLectureProgress, id)
	return err
}
