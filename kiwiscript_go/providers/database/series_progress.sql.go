// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: series_progress.sql

package db

import (
	"context"
)

const addSeriesProgressCompletedParts = `-- name: AddSeriesProgressCompletedParts :exec
UPDATE "series_progress" SET
  "completed_parts" = "completed_parts" + 1,
  "in_progress_parts" = "in_progress_parts" - 1
WHERE "id" = $1
`

func (q *Queries) AddSeriesProgressCompletedParts(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, addSeriesProgressCompletedParts, id)
	return err
}

const createSeriesProgress = `-- name: CreateSeriesProgress :one

INSERT INTO "series_progress" (
  "language_slug",
  "series_slug",
  "language_progress_id",
  "user_id",
  "is_current"
) VALUES (
  $1,
  $2,
  $3,
  $4,
  true
) RETURNING id, user_id, series_slug, language_slug, language_progress_id, in_progress_parts, completed_parts, in_progress_lectures, completed_lectures, parts_count, is_current, completed_at, created_at, updated_at
`

type CreateSeriesProgressParams struct {
	LanguageSlug       string
	SeriesSlug         string
	LanguageProgressID int32
	UserID             int32
}

// Copyright (C) 2024 Afonso Barracha
//
// This file is part of KiwiScript.
//
// KiwiScript is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// KiwiScript is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with KiwiScript.  If not, see <https://www.gnu.org/licenses/>.
func (q *Queries) CreateSeriesProgress(ctx context.Context, arg CreateSeriesProgressParams) (SeriesProgress, error) {
	row := q.db.QueryRow(ctx, createSeriesProgress,
		arg.LanguageSlug,
		arg.SeriesSlug,
		arg.LanguageProgressID,
		arg.UserID,
	)
	var i SeriesProgress
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SeriesSlug,
		&i.LanguageSlug,
		&i.LanguageProgressID,
		&i.InProgressParts,
		&i.CompletedParts,
		&i.InProgressLectures,
		&i.CompletedLectures,
		&i.PartsCount,
		&i.IsCurrent,
		&i.CompletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const decrementSeriesProgressCompletedParts = `-- name: DecrementSeriesProgressCompletedParts :exec
UPDATE "series_progress" SET
  "completed_parts" = "completed_parts" - 1
WHERE "id" = $1
`

func (q *Queries) DecrementSeriesProgressCompletedParts(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, decrementSeriesProgressCompletedParts, id)
	return err
}

const decrementSeriesProgressInProgressParts = `-- name: DecrementSeriesProgressInProgressParts :exec
UPDATE "series_progress" SET
  "in_progress_parts" = "in_progress_parts" - 1
WHERE "id" = $1
`

func (q *Queries) DecrementSeriesProgressInProgressParts(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, decrementSeriesProgressInProgressParts, id)
	return err
}

const deleteSeriesProgress = `-- name: DeleteSeriesProgress :exec
DELETE FROM "series_progress"
WHERE "id" = $1
`

func (q *Queries) DeleteSeriesProgress(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteSeriesProgress, id)
	return err
}

const findSeriesProgressByLanguageProgressID = `-- name: FindSeriesProgressByLanguageProgressID :many
SELECT id, user_id, series_slug, language_slug, language_progress_id, in_progress_parts, completed_parts, in_progress_lectures, completed_lectures, parts_count, is_current, completed_at, created_at, updated_at FROM "series_progress"
WHERE "language_progress_id" = $1
ORDER BY "id" DESC
`

func (q *Queries) FindSeriesProgressByLanguageProgressID(ctx context.Context, languageProgressID int32) ([]SeriesProgress, error) {
	rows, err := q.db.Query(ctx, findSeriesProgressByLanguageProgressID, languageProgressID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SeriesProgress{}
	for rows.Next() {
		var i SeriesProgress
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.SeriesSlug,
			&i.LanguageSlug,
			&i.LanguageProgressID,
			&i.InProgressParts,
			&i.CompletedParts,
			&i.InProgressLectures,
			&i.CompletedLectures,
			&i.PartsCount,
			&i.IsCurrent,
			&i.CompletedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findSeriesProgressBySlugAndUserID = `-- name: FindSeriesProgressBySlugAndUserID :one
SELECT id, user_id, series_slug, language_slug, language_progress_id, in_progress_parts, completed_parts, in_progress_lectures, completed_lectures, parts_count, is_current, completed_at, created_at, updated_at FROM "series_progress"
WHERE
    "language_slug" = $1 AND
    "series_slug" = $2 AND
    "user_id" = $3
LIMIT 1
`

type FindSeriesProgressBySlugAndUserIDParams struct {
	LanguageSlug string
	SeriesSlug   string
	UserID       int32
}

func (q *Queries) FindSeriesProgressBySlugAndUserID(ctx context.Context, arg FindSeriesProgressBySlugAndUserIDParams) (SeriesProgress, error) {
	row := q.db.QueryRow(ctx, findSeriesProgressBySlugAndUserID, arg.LanguageSlug, arg.SeriesSlug, arg.UserID)
	var i SeriesProgress
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SeriesSlug,
		&i.LanguageSlug,
		&i.LanguageProgressID,
		&i.InProgressParts,
		&i.CompletedParts,
		&i.InProgressLectures,
		&i.CompletedLectures,
		&i.PartsCount,
		&i.IsCurrent,
		&i.CompletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const incrementSeriesProgressInProgressParts = `-- name: IncrementSeriesProgressInProgressParts :exec
UPDATE "series_progress" SET
  "in_progress_parts" = "in_progress_parts" + 1
WHERE "id" = $1
`

func (q *Queries) IncrementSeriesProgressInProgressParts(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, incrementSeriesProgressInProgressParts, id)
	return err
}

const removeSeriesProgressCompletedParts = `-- name: RemoveSeriesProgressCompletedParts :exec
UPDATE "series_progress" SET
  "completed_parts" = "completed_parts" - 1,
  "in_progress_parts" = "in_progress_parts" + 1
WHERE "id" = $1
`

func (q *Queries) RemoveSeriesProgressCompletedParts(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, removeSeriesProgressCompletedParts, id)
	return err
}

const setSeriesProgressIsCurrentFalse = `-- name: SetSeriesProgressIsCurrentFalse :exec
UPDATE "series_progress" SET
  "is_current" = false
WHERE "user_id" = $1 AND "language_slug" = $2 AND "series_slug" <> $3
`

type SetSeriesProgressIsCurrentFalseParams struct {
	UserID       int32
	LanguageSlug string
	SeriesSlug   string
}

func (q *Queries) SetSeriesProgressIsCurrentFalse(ctx context.Context, arg SetSeriesProgressIsCurrentFalseParams) error {
	_, err := q.db.Exec(ctx, setSeriesProgressIsCurrentFalse, arg.UserID, arg.LanguageSlug, arg.SeriesSlug)
	return err
}

const setSeriesProgressIsCurrentTrue = `-- name: SetSeriesProgressIsCurrentTrue :one
UPDATE "series_progress" SET
  "is_current" = true
WHERE "id" = $1
RETURNING id, user_id, series_slug, language_slug, language_progress_id, in_progress_parts, completed_parts, in_progress_lectures, completed_lectures, parts_count, is_current, completed_at, created_at, updated_at
`

func (q *Queries) SetSeriesProgressIsCurrentTrue(ctx context.Context, id int32) (SeriesProgress, error) {
	row := q.db.QueryRow(ctx, setSeriesProgressIsCurrentTrue, id)
	var i SeriesProgress
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SeriesSlug,
		&i.LanguageSlug,
		&i.LanguageProgressID,
		&i.InProgressParts,
		&i.CompletedParts,
		&i.InProgressLectures,
		&i.CompletedLectures,
		&i.PartsCount,
		&i.IsCurrent,
		&i.CompletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
