// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: series_progress.sql

package db

import (
	"context"
)

const completeAndIncrementSeriesProgressPartAndLecturesSeriesProgress = `-- name: CompleteAndIncrementSeriesProgressPartAndLecturesSeriesProgress :exec
UPDATE "series_progress" SET
  "is_completed" = true,
  "part" = "part" + 1,
  "lectures_count" = "lectures_count" + 1,
  "completed_at" = NOW()
WHERE "id" = $1
`

func (q *Queries) CompleteAndIncrementSeriesProgressPartAndLecturesSeriesProgress(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, completeAndIncrementSeriesProgressPartAndLecturesSeriesProgress, id)
	return err
}

const createSeriesProgress = `-- name: CreateSeriesProgress :one
INSERT INTO "series_progress" (
  "user_id",
  "series_id",
  "language_id"
) VALUES (
  $1,
  $2,
  $3
) RETURNING id, user_id, series_id, language_id, lectures_count, parts_count, is_completed, completed_at, created_at, updated_at
`

type CreateSeriesProgressParams struct {
	UserID     int32
	SeriesID   int32
	LanguageID int32
}

func (q *Queries) CreateSeriesProgress(ctx context.Context, arg CreateSeriesProgressParams) (SeriesProgress, error) {
	row := q.db.QueryRow(ctx, createSeriesProgress, arg.UserID, arg.SeriesID, arg.LanguageID)
	var i SeriesProgress
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SeriesID,
		&i.LanguageID,
		&i.LecturesCount,
		&i.PartsCount,
		&i.IsCompleted,
		&i.CompletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const decrementSeriesProgressLecturesCount = `-- name: DecrementSeriesProgressLecturesCount :exec
UPDATE "series_progress" SET
  "lectures_count" = "lectures_count" - 1
WHERE "id" = $1
`

func (q *Queries) DecrementSeriesProgressLecturesCount(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, decrementSeriesProgressLecturesCount, id)
	return err
}

const decrementSeriesProgressPartAndLecturesCount = `-- name: DecrementSeriesProgressPartAndLecturesCount :exec
UPDATE "series_progress" SET
  "part" = "part" - 1,
  "lectures_count" = "lectures_count" - 1
WHERE "id" = $1
`

func (q *Queries) DecrementSeriesProgressPartAndLecturesCount(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, decrementSeriesProgressPartAndLecturesCount, id)
	return err
}

const incrementSeriesProgressLecturesCount = `-- name: IncrementSeriesProgressLecturesCount :exec
UPDATE "series_progress" SET
  "lectures_count" = "lectures_count" + 1
WHERE "id" = $1
`

func (q *Queries) IncrementSeriesProgressLecturesCount(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, incrementSeriesProgressLecturesCount, id)
	return err
}

const incrementSeriesProgressPartAndLecturesCount = `-- name: IncrementSeriesProgressPartAndLecturesCount :exec
UPDATE "series_progress" SET
  "part" = "part" + 1,
  "lectures_count" = "lectures_count" + 1
WHERE "id" = $1
`

func (q *Queries) IncrementSeriesProgressPartAndLecturesCount(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, incrementSeriesProgressPartAndLecturesCount, id)
	return err
}
