// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: categories.sql

package db

import (
	"context"
)

const createCategory = `-- name: CreateCategory :one
INSERT INTO "categories" (
  "title",
  "slug",
  "description",
  "author_id"
) VALUES (
  $1,
  $2,
  $3,
  $4
) RETURNING id, title, slug, description, author_id, created_at, updated_at
`

type CreateCategoryParams struct {
	Title       string
	Slug        string
	Description string
	AuthorID    int32
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (Category, error) {
	row := q.db.QueryRow(ctx, createCategory,
		arg.Title,
		arg.Slug,
		arg.Description,
		arg.AuthorID,
	)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Slug,
		&i.Description,
		&i.AuthorID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCategoryById = `-- name: DeleteCategoryById :exec
DELETE FROM "categories"
WHERE "id" = $1
`

func (q *Queries) DeleteCategoryById(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteCategoryById, id)
	return err
}

const findAllCategories = `-- name: FindAllCategories :many
SELECT id, title, slug, description, author_id, created_at, updated_at FROM "categories"
ORDER BY "slug" ASC
`

func (q *Queries) FindAllCategories(ctx context.Context) ([]Category, error) {
	rows, err := q.db.Query(ctx, findAllCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Category{}
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Slug,
			&i.Description,
			&i.AuthorID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findCategoryById = `-- name: FindCategoryById :one
SELECT id, title, slug, description, author_id, created_at, updated_at FROM "categories"
WHERE "id" = $1 LIMIT 1
`

func (q *Queries) FindCategoryById(ctx context.Context, id int32) (Category, error) {
	row := q.db.QueryRow(ctx, findCategoryById, id)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Slug,
		&i.Description,
		&i.AuthorID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findCategoryBySlug = `-- name: FindCategoryBySlug :one
SELECT id, title, slug, description, author_id, created_at, updated_at FROM "categories"
WHERE "slug" = $1 LIMIT 1
`

func (q *Queries) FindCategoryBySlug(ctx context.Context, slug string) (Category, error) {
	row := q.db.QueryRow(ctx, findCategoryBySlug, slug)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Slug,
		&i.Description,
		&i.AuthorID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findPaginatedCategories = `-- name: FindPaginatedCategories :many
SELECT id, title, slug, description, author_id, created_at, updated_at FROM "categories"
ORDER BY "slug" ASC
LIMIT $1 OFFSET $2
`

type FindPaginatedCategoriesParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) FindPaginatedCategories(ctx context.Context, arg FindPaginatedCategoriesParams) ([]Category, error) {
	rows, err := q.db.Query(ctx, findPaginatedCategories, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Category{}
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Slug,
			&i.Description,
			&i.AuthorID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCategory = `-- name: UpdateCategory :one
UPDATE "categories" SET
  "title" = $1,
  "slug" = $2,
  "description" = $3
WHERE "id" = $4
RETURNING id, title, slug, description, author_id, created_at, updated_at
`

type UpdateCategoryParams struct {
	Title       string
	Slug        string
	Description string
	ID          int32
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) (Category, error) {
	row := q.db.QueryRow(ctx, updateCategory,
		arg.Title,
		arg.Slug,
		arg.Description,
		arg.ID,
	)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Slug,
		&i.Description,
		&i.AuthorID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
