// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: lesson_videos.sql

package db

import (
	"context"
)

const createLessonVideo = `-- name: CreateLessonVideo :one

INSERT INTO "lesson_videos" (
  "lesson_id",
  "url",
  "watch_time_seconds"
) VALUES (
  $1,
  $2,
  $3
) RETURNING id, lesson_id, author_id, url, watch_time_seconds, created_at, updated_at
`

type CreateLessonVideoParams struct {
	LessonID         int32
	Url              string
	WatchTimeSeconds int32
}

// Copyright (C) 2024 Afonso Barracha
//
// This file is part of KiwiScript.
//
// KiwiScript is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// KiwiScript is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with KiwiScript.  If not, see <https://www.gnu.org/licenses/>.
func (q *Queries) CreateLessonVideo(ctx context.Context, arg CreateLessonVideoParams) (LessonVideo, error) {
	row := q.db.QueryRow(ctx, createLessonVideo, arg.LessonID, arg.Url, arg.WatchTimeSeconds)
	var i LessonVideo
	err := row.Scan(
		&i.ID,
		&i.LessonID,
		&i.AuthorID,
		&i.Url,
		&i.WatchTimeSeconds,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteLessonVideo = `-- name: DeleteLessonVideo :exec
DELETE FROM "lesson_videos"
WHERE "id" = $1
`

func (q *Queries) DeleteLessonVideo(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteLessonVideo, id)
	return err
}

const getLessonVideoByLessonID = `-- name: GetLessonVideoByLessonID :one
SELECT id, lesson_id, author_id, url, watch_time_seconds, created_at, updated_at FROM "lesson_videos"
WHERE "lesson_id" = $1
LIMIT 1
`

func (q *Queries) GetLessonVideoByLessonID(ctx context.Context, lessonID int32) (LessonVideo, error) {
	row := q.db.QueryRow(ctx, getLessonVideoByLessonID, lessonID)
	var i LessonVideo
	err := row.Scan(
		&i.ID,
		&i.LessonID,
		&i.AuthorID,
		&i.Url,
		&i.WatchTimeSeconds,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateLessonVideo = `-- name: UpdateLessonVideo :one
UPDATE "lesson_videos" SET
  "url" = $1,
  "watch_time_seconds" = $2,
  "updated_at" = NOW()
WHERE "id" = $3
RETURNING id, lesson_id, author_id, url, watch_time_seconds, created_at, updated_at
`

type UpdateLessonVideoParams struct {
	Url              string
	WatchTimeSeconds int32
	ID               int32
}

func (q *Queries) UpdateLessonVideo(ctx context.Context, arg UpdateLessonVideoParams) (LessonVideo, error) {
	row := q.db.QueryRow(ctx, updateLessonVideo, arg.Url, arg.WatchTimeSeconds, arg.ID)
	var i LessonVideo
	err := row.Scan(
		&i.ID,
		&i.LessonID,
		&i.AuthorID,
		&i.Url,
		&i.WatchTimeSeconds,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
