// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: lecture_videos.sql

package db

import (
	"context"
)

const createLectureVideo = `-- name: CreateLectureVideo :one

INSERT INTO "lecture_videos" (
  "lecture_id",
  "url",
  "watch_time_seconds"
) VALUES (
  $1,
  $2,
  $3
) RETURNING id, lecture_id, url, watch_time_seconds, created_at, updated_at
`

type CreateLectureVideoParams struct {
	LectureID        int32
	Url              string
	WatchTimeSeconds int32
}

// Copyright (C) 2024 Afonso Barracha
//
// This file is part of KiwiScript.
//
// KiwiScript is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// KiwiScript is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with KiwiScript.  If not, see <https://www.gnu.org/licenses/>.
func (q *Queries) CreateLectureVideo(ctx context.Context, arg CreateLectureVideoParams) (LectureVideo, error) {
	row := q.db.QueryRow(ctx, createLectureVideo, arg.LectureID, arg.Url, arg.WatchTimeSeconds)
	var i LectureVideo
	err := row.Scan(
		&i.ID,
		&i.LectureID,
		&i.Url,
		&i.WatchTimeSeconds,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteLectureVideo = `-- name: DeleteLectureVideo :exec
DELETE FROM "lecture_videos"
WHERE "id" = $1
`

func (q *Queries) DeleteLectureVideo(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteLectureVideo, id)
	return err
}

const getLectureVideoByLectureID = `-- name: FindLectureVideoByLectureID :one
SELECT id, lecture_id, url, watch_time_seconds, created_at, updated_at FROM "lecture_videos"
WHERE "lecture_id" = $1
LIMIT 1
`

func (q *Queries) GetLectureVideoByLectureID(ctx context.Context, lectureID int32) (LectureVideo, error) {
	row := q.db.QueryRow(ctx, getLectureVideoByLectureID, lectureID)
	var i LectureVideo
	err := row.Scan(
		&i.ID,
		&i.LectureID,
		&i.Url,
		&i.WatchTimeSeconds,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateLectureVideo = `-- name: UpdateLectureVideo :one
UPDATE "lecture_videos" SET
  "url" = $1,
  "watch_time_seconds" = $2,
  "updated_at" = NOW()
WHERE "id" = $3
RETURNING id, lecture_id, url, watch_time_seconds, created_at, updated_at
`

type UpdateLectureVideoParams struct {
	Url              string
	WatchTimeSeconds int32
	ID               int32
}

func (q *Queries) UpdateLectureVideo(ctx context.Context, arg UpdateLectureVideoParams) (LectureVideo, error) {
	row := q.db.QueryRow(ctx, updateLectureVideo, arg.Url, arg.WatchTimeSeconds, arg.ID)
	var i LectureVideo
	err := row.Scan(
		&i.ID,
		&i.LectureID,
		&i.Url,
		&i.WatchTimeSeconds,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
