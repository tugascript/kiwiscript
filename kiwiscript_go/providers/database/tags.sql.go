// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: tags.sql

package db

import (
	"context"
)

const deleteTagById = `-- name: DeleteTagById :exec

DELETE FROM "tags"
WHERE "id" = $1
`

// Copyright (C) 2024 Afonso Barracha
//
// This file is part of KiwiScript.
//
// KiwiScript is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// KiwiScript is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with KiwiScript.  If not, see <https://www.gnu.org/licenses/>.
func (q *Queries) DeleteTagById(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteTagById, id)
	return err
}

const findOrCreateTag = `-- name: FindOrCreateTag :one
INSERT INTO "tags" (
  "name",
  "author_id"
) VALUES (
  $1,
  $2
) ON CONFLICT ("name") DO UPDATE SET
  "name" = EXCLUDED."name"
RETURNING id, name, author_id, created_at, updated_at
`

type FindOrCreateTagParams struct {
	Name     string
	AuthorID int32
}

func (q *Queries) FindOrCreateTag(ctx context.Context, arg FindOrCreateTagParams) (Tag, error) {
	row := q.db.QueryRow(ctx, findOrCreateTag, arg.Name, arg.AuthorID)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.AuthorID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findTagByName = `-- name: FindTagByName :one
SELECT id, name, author_id, created_at, updated_at FROM "tags"
WHERE "name" = $1
LIMIT 1
`

func (q *Queries) FindTagByName(ctx context.Context, name string) (Tag, error) {
	row := q.db.QueryRow(ctx, findTagByName, name)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.AuthorID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
