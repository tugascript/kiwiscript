// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: series_parts.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countSeriesPartsBySeriesId = `-- name: CountSeriesPartsBySeriesId :one
SELECT COUNT("id") AS "count" FROM "series_parts"
WHERE "series_id" = $1 LIMIT 1
`

func (q *Queries) CountSeriesPartsBySeriesId(ctx context.Context, seriesID int32) (int64, error) {
	row := q.db.QueryRow(ctx, countSeriesPartsBySeriesId, seriesID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createSeriesPart = `-- name: CreateSeriesPart :one

INSERT INTO "series_parts" (
  "title",
  "series_id",
  "description",
  "author_id",
  "position"
) VALUES (
  $1,
  $2,
  $3,
  $4,
  (
    SELECT COUNT("id") + 1 FROM "series_parts"
    WHERE "series_id" = $2
  )
) RETURNING id, title, series_id, description, position, lectures_count, total_duration_seconds, is_published, author_id, created_at, updated_at
`

type CreateSeriesPartParams struct {
	Title       string
	SeriesID    int32
	Description string
	AuthorID    int32
}

// Copyright (C) 2024 Afonso Barracha
//
// This file is part of KiwiScript.
//
// KiwiScript is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// KiwiScript is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with KiwiScript.  If not, see <https://www.gnu.org/licenses/>.
func (q *Queries) CreateSeriesPart(ctx context.Context, arg CreateSeriesPartParams) (SeriesPart, error) {
	row := q.db.QueryRow(ctx, createSeriesPart,
		arg.Title,
		arg.SeriesID,
		arg.Description,
		arg.AuthorID,
	)
	var i SeriesPart
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.SeriesID,
		&i.Description,
		&i.Position,
		&i.LecturesCount,
		&i.TotalDurationSeconds,
		&i.IsPublished,
		&i.AuthorID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const decrementSeriesPartPosition = `-- name: DecrementSeriesPartPosition :exec
UPDATE "series_parts" SET
  "position" = "position" - 1
WHERE 
  "series_id" = $1 AND
  "position" > $2 AND 
  "position" <= $3
`

type DecrementSeriesPartPositionParams struct {
	SeriesID   int32
	Position   int16
	Position_2 int16
}

func (q *Queries) DecrementSeriesPartPosition(ctx context.Context, arg DecrementSeriesPartPositionParams) error {
	_, err := q.db.Exec(ctx, decrementSeriesPartPosition, arg.SeriesID, arg.Position, arg.Position_2)
	return err
}

const deleteSeriesPartById = `-- name: DeleteSeriesPartById :exec
DELETE FROM "series_parts"
WHERE "id" = $1
`

func (q *Queries) DeleteSeriesPartById(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteSeriesPartById, id)
	return err
}

const findPaginatedSeriesPartsBySeriesIdWithLectures = `-- name: FindPaginatedSeriesPartsBySeriesIdWithLectures :many
SELECT 
    series_parts.id, series_parts.title, series_parts.series_id, series_parts.description, series_parts.position, series_parts.lectures_count, series_parts.total_duration_seconds, series_parts.is_published, series_parts.author_id, series_parts.created_at, series_parts.updated_at, 
    "lectures"."id" AS "lecture_id", 
    "lectures"."title" AS "lecture_title"
FROM "series_parts"
LEFT JOIN "lectures" ON (
    "series_parts"."id" = "lectures"."series_part_id" AND 
    "lectures"."is_published" = true
)
WHERE "series_parts"."series_id" = $1
ORDER BY 
    "series_parts"."position" ASC,
    "lectures"."position" ASC
LIMIT $2 OFFSET $3
`

type FindPaginatedSeriesPartsBySeriesIdWithLecturesParams struct {
	SeriesID int32
	Limit    int32
	Offset   int32
}

type FindPaginatedSeriesPartsBySeriesIdWithLecturesRow struct {
	ID                   int32
	Title                string
	SeriesID             int32
	Description          string
	Position             int16
	LecturesCount        int16
	TotalDurationSeconds int32
	IsPublished          bool
	AuthorID             int32
	CreatedAt            pgtype.Timestamp
	UpdatedAt            pgtype.Timestamp
	LectureID            pgtype.Int4
	LectureTitle         pgtype.Text
}

func (q *Queries) FindPaginatedSeriesPartsBySeriesIdWithLectures(ctx context.Context, arg FindPaginatedSeriesPartsBySeriesIdWithLecturesParams) ([]FindPaginatedSeriesPartsBySeriesIdWithLecturesRow, error) {
	rows, err := q.db.Query(ctx, findPaginatedSeriesPartsBySeriesIdWithLectures, arg.SeriesID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FindPaginatedSeriesPartsBySeriesIdWithLecturesRow{}
	for rows.Next() {
		var i FindPaginatedSeriesPartsBySeriesIdWithLecturesRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.SeriesID,
			&i.Description,
			&i.Position,
			&i.LecturesCount,
			&i.TotalDurationSeconds,
			&i.IsPublished,
			&i.AuthorID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.LectureID,
			&i.LectureTitle,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findSeriesPartById = `-- name: FindSeriesPartById :one
SELECT id, title, series_id, description, position, lectures_count, total_duration_seconds, is_published, author_id, created_at, updated_at FROM "series_parts"
WHERE "id" = $1 LIMIT 1
`

func (q *Queries) FindSeriesPartById(ctx context.Context, id int32) (SeriesPart, error) {
	row := q.db.QueryRow(ctx, findSeriesPartById, id)
	var i SeriesPart
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.SeriesID,
		&i.Description,
		&i.Position,
		&i.LecturesCount,
		&i.TotalDurationSeconds,
		&i.IsPublished,
		&i.AuthorID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findSeriesPartBySeriesIDAndID = `-- name: FindSeriesPartBySeriesIDAndID :one
SELECT id, title, series_id, description, position, lectures_count, total_duration_seconds, is_published, author_id, created_at, updated_at FROM "series_parts"
WHERE "series_id" = $1 AND "id" = $2 LIMIT 1
`

type FindSeriesPartBySeriesIDAndIDParams struct {
	SeriesID int32
	ID       int32
}

func (q *Queries) FindSeriesPartBySeriesIDAndID(ctx context.Context, arg FindSeriesPartBySeriesIDAndIDParams) (SeriesPart, error) {
	row := q.db.QueryRow(ctx, findSeriesPartBySeriesIDAndID, arg.SeriesID, arg.ID)
	var i SeriesPart
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.SeriesID,
		&i.Description,
		&i.Position,
		&i.LecturesCount,
		&i.TotalDurationSeconds,
		&i.IsPublished,
		&i.AuthorID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findSeriesPartBySeriesIDAndIDWithLectures = `-- name: FindSeriesPartBySeriesIDAndIDWithLectures :many
SELECT 
    series_parts.id, series_parts.title, series_parts.series_id, series_parts.description, series_parts.position, series_parts.lectures_count, series_parts.total_duration_seconds, series_parts.is_published, series_parts.author_id, series_parts.created_at, series_parts.updated_at, 
    "lectures"."id" AS "lecture_id", 
    "lectures"."title" AS "lecture_title"
FROM "series_parts"
LEFT JOIN "lectures" ON ("series_parts"."id" = "lectures"."series_part_id" AND "lectures"."is_published" = true)
WHERE "series_parts"."series_id" = $1 AND "series_parts"."id" = $2
ORDER BY "lectures"."position" ASC
`

type FindSeriesPartBySeriesIDAndIDWithLecturesParams struct {
	SeriesID int32
	ID       int32
}

type FindSeriesPartBySeriesIDAndIDWithLecturesRow struct {
	ID                   int32
	Title                string
	SeriesID             int32
	Description          string
	Position             int16
	LecturesCount        int16
	TotalDurationSeconds int32
	IsPublished          bool
	AuthorID             int32
	CreatedAt            pgtype.Timestamp
	UpdatedAt            pgtype.Timestamp
	LectureID            pgtype.Int4
	LectureTitle         pgtype.Text
}

func (q *Queries) FindSeriesPartBySeriesIDAndIDWithLectures(ctx context.Context, arg FindSeriesPartBySeriesIDAndIDWithLecturesParams) ([]FindSeriesPartBySeriesIDAndIDWithLecturesRow, error) {
	rows, err := q.db.Query(ctx, findSeriesPartBySeriesIDAndIDWithLectures, arg.SeriesID, arg.ID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FindSeriesPartBySeriesIDAndIDWithLecturesRow{}
	for rows.Next() {
		var i FindSeriesPartBySeriesIDAndIDWithLecturesRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.SeriesID,
			&i.Description,
			&i.Position,
			&i.LecturesCount,
			&i.TotalDurationSeconds,
			&i.IsPublished,
			&i.AuthorID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.LectureID,
			&i.LectureTitle,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const incrementSeriesPartPosition = `-- name: IncrementSeriesPartPosition :exec
UPDATE "series_parts" SET
  "position" = "position" + 1
WHERE
  "series_id" = $1 AND 
  "position" < $2 AND
  "position" >= $3
`

type IncrementSeriesPartPositionParams struct {
	SeriesID   int32
	Position   int16
	Position_2 int16
}

func (q *Queries) IncrementSeriesPartPosition(ctx context.Context, arg IncrementSeriesPartPositionParams) error {
	_, err := q.db.Exec(ctx, incrementSeriesPartPosition, arg.SeriesID, arg.Position, arg.Position_2)
	return err
}

const updateSeriesPart = `-- name: UpdateSeriesPart :one
UPDATE "series_parts" SET
  "title" = $1,
  "description" = $2
WHERE "id" = $3
RETURNING id, title, series_id, description, position, lectures_count, total_duration_seconds, is_published, author_id, created_at, updated_at
`

type UpdateSeriesPartParams struct {
	Title       string
	Description string
	ID          int32
}

func (q *Queries) UpdateSeriesPart(ctx context.Context, arg UpdateSeriesPartParams) (SeriesPart, error) {
	row := q.db.QueryRow(ctx, updateSeriesPart, arg.Title, arg.Description, arg.ID)
	var i SeriesPart
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.SeriesID,
		&i.Description,
		&i.Position,
		&i.LecturesCount,
		&i.TotalDurationSeconds,
		&i.IsPublished,
		&i.AuthorID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateSeriesPartIsPublished = `-- name: UpdateSeriesPartIsPublished :one
UPDATE "series_parts" SET
  "is_published" = $1
WHERE "id" = $2
RETURNING id, title, series_id, description, position, lectures_count, total_duration_seconds, is_published, author_id, created_at, updated_at
`

type UpdateSeriesPartIsPublishedParams struct {
	IsPublished bool
	ID          int32
}

func (q *Queries) UpdateSeriesPartIsPublished(ctx context.Context, arg UpdateSeriesPartIsPublishedParams) (SeriesPart, error) {
	row := q.db.QueryRow(ctx, updateSeriesPartIsPublished, arg.IsPublished, arg.ID)
	var i SeriesPart
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.SeriesID,
		&i.Description,
		&i.Position,
		&i.LecturesCount,
		&i.TotalDurationSeconds,
		&i.IsPublished,
		&i.AuthorID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateSeriesPartWithPosition = `-- name: UpdateSeriesPartWithPosition :one
UPDATE "series_parts" SET
  "title" = $1,
  "description" = $2,
  "position" = $3
WHERE "id" = $4
RETURNING id, title, series_id, description, position, lectures_count, total_duration_seconds, is_published, author_id, created_at, updated_at
`

type UpdateSeriesPartWithPositionParams struct {
	Title       string
	Description string
	Position    int16
	ID          int32
}

func (q *Queries) UpdateSeriesPartWithPosition(ctx context.Context, arg UpdateSeriesPartWithPositionParams) (SeriesPart, error) {
	row := q.db.QueryRow(ctx, updateSeriesPartWithPosition,
		arg.Title,
		arg.Description,
		arg.Position,
		arg.ID,
	)
	var i SeriesPart
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.SeriesID,
		&i.Description,
		&i.Position,
		&i.LecturesCount,
		&i.TotalDurationSeconds,
		&i.IsPublished,
		&i.AuthorID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
