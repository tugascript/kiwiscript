// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: series_parts.sql

package db

import (
	"context"
)

const countSeriesPartsBySeriesId = `-- name: CountSeriesPartsBySeriesId :one
SELECT COUNT(*) AS "count" FROM "series_parts"
WHERE "series_id" = $1 LIMIT 1
`

func (q *Queries) CountSeriesPartsBySeriesId(ctx context.Context, seriesID int32) (int64, error) {
	row := q.db.QueryRow(ctx, countSeriesPartsBySeriesId, seriesID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createSeriesPart = `-- name: CreateSeriesPart :one
INSERT INTO "series_parts" (
  "title",
  "series_id",
  "description",
  "author_id",
  "position"
) VALUES (
  $1,
  $2,
  $3,
  $4,
  (
    SELECT COUNT("id") + 1 FROM "series_parts"
    WHERE "series_id" = $2
  )
) RETURNING id, title, series_id, description, position, lectures_count, total_duration_seconds, is_published, author_id, created_at, updated_at
`

type CreateSeriesPartParams struct {
	Title       string
	SeriesID    int32
	Description string
	AuthorID    int32
}

func (q *Queries) CreateSeriesPart(ctx context.Context, arg CreateSeriesPartParams) (SeriesPart, error) {
	row := q.db.QueryRow(ctx, createSeriesPart,
		arg.Title,
		arg.SeriesID,
		arg.Description,
		arg.AuthorID,
	)
	var i SeriesPart
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.SeriesID,
		&i.Description,
		&i.Position,
		&i.LecturesCount,
		&i.TotalDurationSeconds,
		&i.IsPublished,
		&i.AuthorID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const decrementSeriesPartPosition = `-- name: DecrementSeriesPartPosition :exec
UPDATE "series_parts" SET
  "position" = "position" - 1
WHERE 
    "series_id" = $1 AND
    "position" > $2 AND 
    "position" <= $3
`

type DecrementSeriesPartPositionParams struct {
	SeriesID   int32
	Position   int16
	Position_2 int16
}

func (q *Queries) DecrementSeriesPartPosition(ctx context.Context, arg DecrementSeriesPartPositionParams) error {
	_, err := q.db.Exec(ctx, decrementSeriesPartPosition, arg.SeriesID, arg.Position, arg.Position_2)
	return err
}

const deleteSeriesPartById = `-- name: DeleteSeriesPartById :exec
DELETE FROM "series_parts"
WHERE "id" = $1
`

func (q *Queries) DeleteSeriesPartById(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteSeriesPartById, id)
	return err
}

const findPaginatedSeriesPartsBySeriesId = `-- name: FindPaginatedSeriesPartsBySeriesId :many
SELECT id, title, series_id, description, position, lectures_count, total_duration_seconds, is_published, author_id, created_at, updated_at FROM "series_parts"
WHERE "series_id" = $1
ORDER BY "position" ASC
LIMIT $2 OFFSET $3
`

type FindPaginatedSeriesPartsBySeriesIdParams struct {
	SeriesID int32
	Limit    int32
	Offset   int32
}

func (q *Queries) FindPaginatedSeriesPartsBySeriesId(ctx context.Context, arg FindPaginatedSeriesPartsBySeriesIdParams) ([]SeriesPart, error) {
	rows, err := q.db.Query(ctx, findPaginatedSeriesPartsBySeriesId, arg.SeriesID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SeriesPart{}
	for rows.Next() {
		var i SeriesPart
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.SeriesID,
			&i.Description,
			&i.Position,
			&i.LecturesCount,
			&i.TotalDurationSeconds,
			&i.IsPublished,
			&i.AuthorID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findSeriesPartById = `-- name: FindSeriesPartById :one
SELECT id, title, series_id, description, position, lectures_count, total_duration_seconds, is_published, author_id, created_at, updated_at FROM "series_parts"
WHERE "id" = $1 LIMIT 1
`

func (q *Queries) FindSeriesPartById(ctx context.Context, id int32) (SeriesPart, error) {
	row := q.db.QueryRow(ctx, findSeriesPartById, id)
	var i SeriesPart
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.SeriesID,
		&i.Description,
		&i.Position,
		&i.LecturesCount,
		&i.TotalDurationSeconds,
		&i.IsPublished,
		&i.AuthorID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findSeriesPartBySeriesId = `-- name: FindSeriesPartBySeriesId :many
SELECT id, title, series_id, description, position, lectures_count, total_duration_seconds, is_published, author_id, created_at, updated_at FROM "series_parts"
WHERE "series_id" = $1
ORDER BY "position" ASC
`

func (q *Queries) FindSeriesPartBySeriesId(ctx context.Context, seriesID int32) ([]SeriesPart, error) {
	rows, err := q.db.Query(ctx, findSeriesPartBySeriesId, seriesID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SeriesPart{}
	for rows.Next() {
		var i SeriesPart
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.SeriesID,
			&i.Description,
			&i.Position,
			&i.LecturesCount,
			&i.TotalDurationSeconds,
			&i.IsPublished,
			&i.AuthorID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const incrementSeriesPartPosition = `-- name: IncrementSeriesPartPosition :exec
UPDATE "series_parts" SET
  "position" = "position" + 1
WHERE "series_id" = $1 AND "position" >= $2
`

type IncrementSeriesPartPositionParams struct {
	SeriesID int32
	Position int16
}

func (q *Queries) IncrementSeriesPartPosition(ctx context.Context, arg IncrementSeriesPartPositionParams) error {
	_, err := q.db.Exec(ctx, incrementSeriesPartPosition, arg.SeriesID, arg.Position)
	return err
}

const updateSeriesPart = `-- name: UpdateSeriesPart :one
UPDATE "series_parts" SET
  "title" = $1,
  "description" = $2
WHERE "id" = $3
RETURNING id, title, series_id, description, position, lectures_count, total_duration_seconds, is_published, author_id, created_at, updated_at
`

type UpdateSeriesPartParams struct {
	Title       string
	Description string
	ID          int32
}

func (q *Queries) UpdateSeriesPart(ctx context.Context, arg UpdateSeriesPartParams) (SeriesPart, error) {
	row := q.db.QueryRow(ctx, updateSeriesPart, arg.Title, arg.Description, arg.ID)
	var i SeriesPart
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.SeriesID,
		&i.Description,
		&i.Position,
		&i.LecturesCount,
		&i.TotalDurationSeconds,
		&i.IsPublished,
		&i.AuthorID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateSeriesPartIsPublished = `-- name: UpdateSeriesPartIsPublished :one
UPDATE "series_parts" SET
  "is_published" = $1
WHERE "id" = $2
RETURNING id, title, series_id, description, position, lectures_count, total_duration_seconds, is_published, author_id, created_at, updated_at
`

type UpdateSeriesPartIsPublishedParams struct {
	IsPublished bool
	ID          int32
}

func (q *Queries) UpdateSeriesPartIsPublished(ctx context.Context, arg UpdateSeriesPartIsPublishedParams) (SeriesPart, error) {
	row := q.db.QueryRow(ctx, updateSeriesPartIsPublished, arg.IsPublished, arg.ID)
	var i SeriesPart
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.SeriesID,
		&i.Description,
		&i.Position,
		&i.LecturesCount,
		&i.TotalDurationSeconds,
		&i.IsPublished,
		&i.AuthorID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateSeriesPartPosition = `-- name: UpdateSeriesPartPosition :one
UPDATE "series_parts" SET
  "position" = $1
WHERE "id" = $2
RETURNING id, title, series_id, description, position, lectures_count, total_duration_seconds, is_published, author_id, created_at, updated_at
`

type UpdateSeriesPartPositionParams struct {
	Position int16
	ID       int32
}

func (q *Queries) UpdateSeriesPartPosition(ctx context.Context, arg UpdateSeriesPartPositionParams) (SeriesPart, error) {
	row := q.db.QueryRow(ctx, updateSeriesPartPosition, arg.Position, arg.ID)
	var i SeriesPart
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.SeriesID,
		&i.Description,
		&i.Position,
		&i.LecturesCount,
		&i.TotalDurationSeconds,
		&i.IsPublished,
		&i.AuthorID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
