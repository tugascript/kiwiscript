// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: lectures.sql

package db

import (
	"context"
)

const countLecturesBySeriesPartID = `-- name: CountLecturesBySeriesPartID :one
SELECT COUNT("id") FROM "lectures"
WHERE "series_part_id" = $1
LIMIT 1
`

func (q *Queries) CountLecturesBySeriesPartID(ctx context.Context, seriesPartID int32) (int64, error) {
	row := q.db.QueryRow(ctx, countLecturesBySeriesPartID, seriesPartID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createLecture = `-- name: CreateLecture :one

INSERT INTO "lectures" (
  "title",
  "description",
  "author_id",
  "series_part_id",
  "position"
) VALUES (
  $1,
  $2,
  $3,
  $4,
  (
    SELECT COUNT("id") + 1 FROM "lectures"
    WHERE "series_part_id" = $4
  )
) RETURNING id, title, position, description, is_published, comments_count, watch_time_seconds, read_time_seconds, author_id, series_part_id, created_at, updated_at
`

type CreateLectureParams struct {
	Title        string
	Description  string
	AuthorID     int32
	SeriesPartID int32
}

// Copyright (C) 2024 Afonso Barracha
//
// This file is part of KiwiScript.
//
// KiwiScript is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// KiwiScript is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with KiwiScript.  If not, see <https://www.gnu.org/licenses/>.
func (q *Queries) CreateLecture(ctx context.Context, arg CreateLectureParams) (Lecture, error) {
	row := q.db.QueryRow(ctx, createLecture,
		arg.Title,
		arg.Description,
		arg.AuthorID,
		arg.SeriesPartID,
	)
	var i Lecture
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Position,
		&i.Description,
		&i.IsPublished,
		&i.CommentsCount,
		&i.WatchTimeSeconds,
		&i.ReadTimeSeconds,
		&i.AuthorID,
		&i.SeriesPartID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const decrementLectureCommentsCount = `-- name: DecrementLectureCommentsCount :exec
UPDATE "lectures" SET
  "comments_count" = "comments_count" - 1
WHERE "id" = $1
`

func (q *Queries) DecrementLectureCommentsCount(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, decrementLectureCommentsCount, id)
	return err
}

const decrementLecturePosition = `-- name: DecrementLecturePosition :exec
UPDATE "lectures" SET
  "position" = "position" - 1
WHERE 
    "series_part_id" = $1 AND 
    "position" > $2 AND 
    "position" <= $3
`

type DecrementLecturePositionParams struct {
	SeriesPartID int32
	Position     int16
	Position_2   int16
}

func (q *Queries) DecrementLecturePosition(ctx context.Context, arg DecrementLecturePositionParams) error {
	_, err := q.db.Exec(ctx, decrementLecturePosition, arg.SeriesPartID, arg.Position, arg.Position_2)
	return err
}

const deleteLectureByID = `-- name: DeleteLectureByID :exec
DELETE FROM "lectures"
WHERE "id" = $1
`

func (q *Queries) DeleteLectureByID(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteLectureByID, id)
	return err
}

const findLectureByIDs = `-- name: FindLectureByIDs :one
SELECT id, title, position, description, is_published, comments_count, watch_time_seconds, read_time_seconds, author_id, series_part_id, created_at, updated_at FROM "lectures"
WHERE
  "series_part_id" = $1 AND
  "id" = $2
LIMIT 1
`

type FindLectureByIDsParams struct {
	SeriesPartID int32
	ID           int32
}

func (q *Queries) FindLectureByIDs(ctx context.Context, arg FindLectureByIDsParams) (Lecture, error) {
	row := q.db.QueryRow(ctx, findLectureByIDs, arg.SeriesPartID, arg.ID)
	var i Lecture
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Position,
		&i.Description,
		&i.IsPublished,
		&i.CommentsCount,
		&i.WatchTimeSeconds,
		&i.ReadTimeSeconds,
		&i.AuthorID,
		&i.SeriesPartID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findLecturesBySeriesPartID = `-- name: FindLecturesBySeriesPartID :many
SELECT id, title, position, description, is_published, comments_count, watch_time_seconds, read_time_seconds, author_id, series_part_id, created_at, updated_at FROM "lectures"
WHERE "series_part_id" = $1
ORDER BY "position" ASC
`

func (q *Queries) FindLecturesBySeriesPartID(ctx context.Context, seriesPartID int32) ([]Lecture, error) {
	rows, err := q.db.Query(ctx, findLecturesBySeriesPartID, seriesPartID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Lecture{}
	for rows.Next() {
		var i Lecture
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Position,
			&i.Description,
			&i.IsPublished,
			&i.CommentsCount,
			&i.WatchTimeSeconds,
			&i.ReadTimeSeconds,
			&i.AuthorID,
			&i.SeriesPartID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findPaginatedLecturesBySeriesPartID = `-- name: FindPaginatedLecturesBySeriesPartID :many
SELECT id, title, position, description, is_published, comments_count, watch_time_seconds, read_time_seconds, author_id, series_part_id, created_at, updated_at FROM "lectures"
WHERE "series_part_id" = $1
ORDER BY "position" ASC
LIMIT $2 OFFSET $3
`

type FindPaginatedLecturesBySeriesPartIDParams struct {
	SeriesPartID int32
	Limit        int32
	Offset       int32
}

func (q *Queries) FindPaginatedLecturesBySeriesPartID(ctx context.Context, arg FindPaginatedLecturesBySeriesPartIDParams) ([]Lecture, error) {
	rows, err := q.db.Query(ctx, findPaginatedLecturesBySeriesPartID, arg.SeriesPartID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Lecture{}
	for rows.Next() {
		var i Lecture
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Position,
			&i.Description,
			&i.IsPublished,
			&i.CommentsCount,
			&i.WatchTimeSeconds,
			&i.ReadTimeSeconds,
			&i.AuthorID,
			&i.SeriesPartID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findPublishedLectureByIDs = `-- name: FindPublishedLectureByIDs :one
SELECT id, title, position, description, is_published, comments_count, watch_time_seconds, read_time_seconds, author_id, series_part_id, created_at, updated_at FROM "lectures"
WHERE 
  "is_published" = true AND 
  "series_part_id" = $1 AND
  "id" = $2
LIMIT 1
`

type FindPublishedLectureByIDsParams struct {
	SeriesPartID int32
	ID           int32
}

func (q *Queries) FindPublishedLectureByIDs(ctx context.Context, arg FindPublishedLectureByIDsParams) (Lecture, error) {
	row := q.db.QueryRow(ctx, findPublishedLectureByIDs, arg.SeriesPartID, arg.ID)
	var i Lecture
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Position,
		&i.Description,
		&i.IsPublished,
		&i.CommentsCount,
		&i.WatchTimeSeconds,
		&i.ReadTimeSeconds,
		&i.AuthorID,
		&i.SeriesPartID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const incrementLectureCommentsCount = `-- name: IncrementLectureCommentsCount :exec
UPDATE "lectures" SET
  "comments_count" = "comments_count" + 1
WHERE "id" = $1
`

func (q *Queries) IncrementLectureCommentsCount(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, incrementLectureCommentsCount, id)
	return err
}

const incrementLecturePosition = `-- name: IncrementLecturePosition :exec
UPDATE "lectures" SET
  "position" = "position" + 1
WHERE
  "series_part_id" = $1 AND
  "position" < $2 AND
  "position" >= $3
`

type IncrementLecturePositionParams struct {
	SeriesPartID int32
	Position     int16
	Position_2   int16
}

func (q *Queries) IncrementLecturePosition(ctx context.Context, arg IncrementLecturePositionParams) error {
	_, err := q.db.Exec(ctx, incrementLecturePosition, arg.SeriesPartID, arg.Position, arg.Position_2)
	return err
}

const updateLecture = `-- name: UpdateLecture :one
UPDATE "lectures" SET
  "title" = $1,
  "description" = $2
WHERE "id" = $3
RETURNING id, title, position, description, is_published, comments_count, watch_time_seconds, read_time_seconds, author_id, series_part_id, created_at, updated_at
`

type UpdateLectureParams struct {
	Title       string
	Description string
	ID          int32
}

func (q *Queries) UpdateLecture(ctx context.Context, arg UpdateLectureParams) (Lecture, error) {
	row := q.db.QueryRow(ctx, updateLecture, arg.Title, arg.Description, arg.ID)
	var i Lecture
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Position,
		&i.Description,
		&i.IsPublished,
		&i.CommentsCount,
		&i.WatchTimeSeconds,
		&i.ReadTimeSeconds,
		&i.AuthorID,
		&i.SeriesPartID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateLectureIsPublished = `-- name: UpdateLectureIsPublished :one
UPDATE "lectures" SET
  "is_published" = $1
WHERE "id" = $2
RETURNING id, title, position, description, is_published, comments_count, watch_time_seconds, read_time_seconds, author_id, series_part_id, created_at, updated_at
`

type UpdateLectureIsPublishedParams struct {
	IsPublished bool
	ID          int32
}

func (q *Queries) UpdateLectureIsPublished(ctx context.Context, arg UpdateLectureIsPublishedParams) (Lecture, error) {
	row := q.db.QueryRow(ctx, updateLectureIsPublished, arg.IsPublished, arg.ID)
	var i Lecture
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Position,
		&i.Description,
		&i.IsPublished,
		&i.CommentsCount,
		&i.WatchTimeSeconds,
		&i.ReadTimeSeconds,
		&i.AuthorID,
		&i.SeriesPartID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateLecturePosition = `-- name: UpdateLecturePosition :one
UPDATE "lectures" SET
  "position" = $1
WHERE "id" = $2
RETURNING id, title, position, description, is_published, comments_count, watch_time_seconds, read_time_seconds, author_id, series_part_id, created_at, updated_at
`

type UpdateLecturePositionParams struct {
	Position int16
	ID       int32
}

func (q *Queries) UpdateLecturePosition(ctx context.Context, arg UpdateLecturePositionParams) (Lecture, error) {
	row := q.db.QueryRow(ctx, updateLecturePosition, arg.Position, arg.ID)
	var i Lecture
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Position,
		&i.Description,
		&i.IsPublished,
		&i.CommentsCount,
		&i.WatchTimeSeconds,
		&i.ReadTimeSeconds,
		&i.AuthorID,
		&i.SeriesPartID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateLectureWithPosition = `-- name: UpdateLectureWithPosition :one
UPDATE "lectures" SET
  "title" = $1,
  "description" = $2,
  "position" = $3
WHERE "id" = $4
RETURNING id, title, position, description, is_published, comments_count, watch_time_seconds, read_time_seconds, author_id, series_part_id, created_at, updated_at
`

type UpdateLectureWithPositionParams struct {
	Title       string
	Description string
	Position    int16
	ID          int32
}

func (q *Queries) UpdateLectureWithPosition(ctx context.Context, arg UpdateLectureWithPositionParams) (Lecture, error) {
	row := q.db.QueryRow(ctx, updateLectureWithPosition,
		arg.Title,
		arg.Description,
		arg.Position,
		arg.ID,
	)
	var i Lecture
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Position,
		&i.Description,
		&i.IsPublished,
		&i.CommentsCount,
		&i.WatchTimeSeconds,
		&i.ReadTimeSeconds,
		&i.AuthorID,
		&i.SeriesPartID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
