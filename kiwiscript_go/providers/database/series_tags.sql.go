// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: series_tags.sql

package db

import (
	"context"
)

const countSeriesTagsBySeriesID = `-- name: CountSeriesTagsBySeriesID :one
SELECT COUNT("tag_id") FROM "series_tags"
WHERE "series_id" = $1
LIMIT 1
`

func (q *Queries) CountSeriesTagsBySeriesID(ctx context.Context, seriesID int32) (int64, error) {
	row := q.db.QueryRow(ctx, countSeriesTagsBySeriesID, seriesID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createSeriesTag = `-- name: CreateSeriesTag :exec

INSERT INTO "series_tags" (
    "series_id",
    "tag_id"
) VALUES (
    $1,
    $2
)
`

type CreateSeriesTagParams struct {
	SeriesID int32
	TagID    int32
}

// Copyright (C) 2024 Afonso Barracha
//
// This file is part of KiwiScript.
//
// KiwiScript is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// KiwiScript is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with KiwiScript.  If not, see <https://www.gnu.org/licenses/>.
func (q *Queries) CreateSeriesTag(ctx context.Context, arg CreateSeriesTagParams) error {
	_, err := q.db.Exec(ctx, createSeriesTag, arg.SeriesID, arg.TagID)
	return err
}

const deleteSeriesTagByIDs = `-- name: DeleteSeriesTagByIDs :exec
DELETE FROM "series_tags"
WHERE "series_id" = $1 AND "tag_id" = $2
`

type DeleteSeriesTagByIDsParams struct {
	SeriesID int32
	TagID    int32
}

func (q *Queries) DeleteSeriesTagByIDs(ctx context.Context, arg DeleteSeriesTagByIDsParams) error {
	_, err := q.db.Exec(ctx, deleteSeriesTagByIDs, arg.SeriesID, arg.TagID)
	return err
}

const deleteSeriesTagByNameAndSeriesID = `-- name: DeleteSeriesTagByNameAndSeriesID :exec
DELETE FROM "series_tags"
WHERE "tag_id" = (
    SELECT "id" FROM "tags"
    WHERE "name" = $1 LIMIT 1
) AND "series_id" = $2
`

type DeleteSeriesTagByNameAndSeriesIDParams struct {
	Name     string
	SeriesID int32
}

func (q *Queries) DeleteSeriesTagByNameAndSeriesID(ctx context.Context, arg DeleteSeriesTagByNameAndSeriesIDParams) error {
	_, err := q.db.Exec(ctx, deleteSeriesTagByNameAndSeriesID, arg.Name, arg.SeriesID)
	return err
}

const findTagsBySeriesID = `-- name: FindTagsBySeriesID :many
SELECT tags.id, tags.name, tags.author_id, tags.created_at, tags.updated_at FROM "series_tags"
JOIN "tags" ON "tags"."id" = "series_tags"."tag_id"
WHERE "series_tags"."series_id" = $1
ORDER BY "tags"."name" ASC
`

func (q *Queries) FindTagsBySeriesID(ctx context.Context, seriesID int32) ([]Tag, error) {
	rows, err := q.db.Query(ctx, findTagsBySeriesID, seriesID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Tag{}
	for rows.Next() {
		var i Tag
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.AuthorID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
