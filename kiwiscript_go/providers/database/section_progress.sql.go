// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: section_progress.sql

package db

import (
	"context"
)

const createSectionProgress = `-- name: CreateSectionProgress :one

INSERT INTO "section_progress" (
  "language_slug",
  "series_slug",
  "section_id",
  "language_progress_id",
  "series_progress_id",
  "user_id"
) VALUES (
  $1,
  $2,
  $3,
  $4,
  $5,
  $6
) RETURNING id, user_id, language_slug, series_slug, section_id, language_progress_id, series_progress_id, completed_lessons, completed_at, viewed_at, created_at, updated_at
`

type CreateSectionProgressParams struct {
	LanguageSlug       string
	SeriesSlug         string
	SectionID          int32
	LanguageProgressID int32
	SeriesProgressID   int32
	UserID             int32
}

// Copyright (C) 2024 Afonso Barracha
//
// This file is part of KiwiScript.
//
// KiwiScript is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// KiwiScript is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with KiwiScript.  If not, see <https://www.gnu.org/licenses/>.
func (q *Queries) CreateSectionProgress(ctx context.Context, arg CreateSectionProgressParams) (SectionProgress, error) {
	row := q.db.QueryRow(ctx, createSectionProgress,
		arg.LanguageSlug,
		arg.SeriesSlug,
		arg.SectionID,
		arg.LanguageProgressID,
		arg.SeriesProgressID,
		arg.UserID,
	)
	var i SectionProgress
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.LanguageSlug,
		&i.SeriesSlug,
		&i.SectionID,
		&i.LanguageProgressID,
		&i.SeriesProgressID,
		&i.CompletedLessons,
		&i.CompletedAt,
		&i.ViewedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const decrementSectionProgressCompletedLessons = `-- name: DecrementSectionProgressCompletedLessons :exec
UPDATE "section_progress"
SET
    "completed_lessons" = "section_progress"."completed_lessons" -1,
    "completed_at" = CASE
        WHEN "section_progress"."completed_lessons" IS NOT NULL THEN (NULL)
        ELSE "section_progress"."completed_at"
    END
FROM "sections"
WHERE
    "section_progress"."section_id" = "sections"."id" AND
    "section_progress"."id" = $1
`

func (q *Queries) DecrementSectionProgressCompletedLessons(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, decrementSectionProgressCompletedLessons, id)
	return err
}

const deleteSectionProgress = `-- name: DeleteSectionProgress :exec
DELETE FROM "section_progress"
WHERE "id" = $1
`

func (q *Queries) DeleteSectionProgress(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteSectionProgress, id)
	return err
}

const findSectionProgressByID = `-- name: FindSectionProgressByID :one
SELECT id, user_id, language_slug, series_slug, section_id, language_progress_id, series_progress_id, completed_lessons, completed_at, viewed_at, created_at, updated_at FROM "section_progress"
WHERE "id" = $1
LIMIT 1
`

func (q *Queries) FindSectionProgressByID(ctx context.Context, id int32) (SectionProgress, error) {
	row := q.db.QueryRow(ctx, findSectionProgressByID, id)
	var i SectionProgress
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.LanguageSlug,
		&i.SeriesSlug,
		&i.SectionID,
		&i.LanguageProgressID,
		&i.SeriesProgressID,
		&i.CompletedLessons,
		&i.CompletedAt,
		&i.ViewedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findSectionProgressBySlugsAndUserID = `-- name: FindSectionProgressBySlugsAndUserID :one
SELECT id, user_id, language_slug, series_slug, section_id, language_progress_id, series_progress_id, completed_lessons, completed_at, viewed_at, created_at, updated_at FROM "section_progress"
WHERE
    "language_slug" = $1 AND
    "series_slug" = $2 AND
    "section_id" = $3 AND
    "user_id" = $4
LIMIT 1
`

type FindSectionProgressBySlugsAndUserIDParams struct {
	LanguageSlug string
	SeriesSlug   string
	SectionID    int32
	UserID       int32
}

func (q *Queries) FindSectionProgressBySlugsAndUserID(ctx context.Context, arg FindSectionProgressBySlugsAndUserIDParams) (SectionProgress, error) {
	row := q.db.QueryRow(ctx, findSectionProgressBySlugsAndUserID,
		arg.LanguageSlug,
		arg.SeriesSlug,
		arg.SectionID,
		arg.UserID,
	)
	var i SectionProgress
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.LanguageSlug,
		&i.SeriesSlug,
		&i.SectionID,
		&i.LanguageProgressID,
		&i.SeriesProgressID,
		&i.CompletedLessons,
		&i.CompletedAt,
		&i.ViewedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const incrementSectionProgressCompletedLessons = `-- name: IncrementSectionProgressCompletedLessons :one
UPDATE "section_progress"
SET
    "completed_lessons" = "section_progress"."completed_lessons" + 1,
    "completed_at" = CASE
        WHEN "sections"."lessons_count" + 1 > "section_progress"."completed_lessons" THEN (NOW())
        ELSE "section_progress"."completed_at"
    END
FROM "sections"
WHERE
    "section_progress"."section_id" = "sections"."id" AND
    "section_progress"."id" = $1
RETURNING section_progress.id, section_progress.user_id, section_progress.language_slug, section_progress.series_slug, section_progress.section_id, section_progress.language_progress_id, section_progress.series_progress_id, section_progress.completed_lessons, section_progress.completed_at, section_progress.viewed_at, section_progress.created_at, section_progress.updated_at
`

func (q *Queries) IncrementSectionProgressCompletedLessons(ctx context.Context, id int32) (SectionProgress, error) {
	row := q.db.QueryRow(ctx, incrementSectionProgressCompletedLessons, id)
	var i SectionProgress
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.LanguageSlug,
		&i.SeriesSlug,
		&i.SectionID,
		&i.LanguageProgressID,
		&i.SeriesProgressID,
		&i.CompletedLessons,
		&i.CompletedAt,
		&i.ViewedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateSectionProgressViewedAt = `-- name: UpdateSectionProgressViewedAt :exec
UPDATE "section_progress"
SET "viewed_at" = NOW()
WHERE "id" = $1
`

func (q *Queries) UpdateSectionProgressViewedAt(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, updateSectionProgressViewedAt, id)
	return err
}
